{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TinyResult","text":"<p>A lightweight and powerful Result Pattern implementation for .NET that helps you write more robust and maintainable code.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Result Pattern Implementation: Clean and type-safe way to handle success and failure cases</li> <li>Error Handling: Comprehensive error handling with detailed error information</li> <li>Validation Support: Built-in validation support with detailed validation results</li> <li>Async Support: Full async/await support for all operations</li> <li>LINQ Support: LINQ-style operations for working with results</li> <li>Pipeline Support: Fluent API for chaining operations and handling results</li> <li>Extensible: Easy to extend with custom functionality</li> <li>Lightweight: Minimal dependencies and overhead</li> <li>Wide .NET Support: Compatible with .NET 6.0, 7.0, 8.0, and 9.0</li> </ul>"},{"location":"#requirements","title":"\ud83d\udee0\ufe0f Requirements","text":"<ul> <li>.NET 6.0, 7.0, 8.0, or 9.0</li> </ul>"},{"location":"#packages","title":"\ud83d\udce6 Packages","text":""},{"location":"#core-package","title":"Core Package","text":"<pre><code>dotnet add package TinyResult\n</code></pre>"},{"location":"#quick-start","title":"\ud83d\udca1 Quick Start","text":"<pre><code>// Create a successful result\nvar success = Result&lt;string&gt;.Success(\"Hello, World!\");\n\n// Create a failed result\nvar failure = Result&lt;string&gt;.Failure(\"Something went wrong\");\n\n// Handle the result\nvar message = success.Match(\n    value =&gt; $\"Success: {value}\",\n    error =&gt; $\"Error: {error.Message}\"\n);\n</code></pre>"},{"location":"#target-audience","title":"\ud83c\udfaf Target Audience","text":"<p>This library is designed for .NET developers who want to:</p> <ul> <li>Write more robust and maintainable code</li> <li>Handle errors in a clean and type-safe way</li> <li>Implement the Result Pattern in their applications</li> <li>Improve their code quality and reliability</li> <li>Make their code more testable</li> </ul>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Introduction</li> <li>Installation</li> <li>Basic Usage</li> </ul>"},{"location":"#features_1","title":"Features","text":"<ul> <li>Result Pattern</li> <li>Error Handling</li> <li>Validation</li> <li>Async Support</li> <li>LINQ Support</li> <li>Extensions</li> <li>Pipeline</li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Basic Examples</li> <li>Advanced Examples</li> <li>Real World Scenarios</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Result</li> <li>Error</li> <li>ValidationResult</li> <li>Extensions</li> </ul>"},{"location":"#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Best Practices</li> <li>Performance</li> <li>Testing</li> <li>Integration</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#contact","title":"\ud83d\udcde Contact","text":"<ul> <li>GitHub: MuratDincc</li> <li>LinkedIn: Murat Din\u00e7</li> <li>Medium: Murat Din\u00e7</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started</li> <li>Features</li> <li>Examples</li> <li>API Reference</li> <li>Advanced Topics </li> </ul>"},{"location":"advanced-topics/best-practices/","title":"Best Practices","text":""},{"location":"advanced-topics/best-practices/#overview","title":"Overview","text":"<p>This section contains recommended best practices for using the TinyResult library.</p>"},{"location":"advanced-topics/best-practices/#return-values","title":"Return Values","text":""},{"location":"advanced-topics/best-practices/#always-return-results","title":"Always Return Results","text":"<pre><code>// Bad\npublic User GetUser(int id)\n{\n    var user = _repository.GetUser(id);\n    if (user == null)\n        throw new UserNotFoundException();\n    return user;\n}\n\n// Good\npublic Result&lt;User&gt; GetUser(int id)\n{\n    var user = _repository.GetUser(id);\n    if (user == null)\n        return Result&lt;User&gt;.Failure(\"User not found\");\n    return Result&lt;User&gt;.Success(user);\n}\n</code></pre>"},{"location":"advanced-topics/best-practices/#convert-exceptions-to-results","title":"Convert Exceptions to Results","text":"<pre><code>// Bad\npublic Result&lt;User&gt; GetUser(int id)\n{\n    try\n    {\n        var user = _repository.GetUser(id);\n        return Result&lt;User&gt;.Success(user);\n    }\n    catch (Exception ex)\n    {\n        throw;\n    }\n}\n\n// Good\npublic Result&lt;User&gt; GetUser(int id)\n{\n    return Result&lt;User&gt;.Try(() =&gt; _repository.GetUser(id));\n}\n</code></pre>"},{"location":"advanced-topics/best-practices/#error-handling","title":"Error Handling","text":""},{"location":"advanced-topics/best-practices/#use-custom-error-codes","title":"Use Custom Error Codes","text":"<pre><code>// Bad\nreturn Result&lt;User&gt;.Failure(\"User not found\");\n\n// Good\nreturn Result&lt;User&gt;.Failure(ErrorCode.NotFound, \"User not found\");\n</code></pre>"},{"location":"advanced-topics/best-practices/#use-error-metadata","title":"Use Error Metadata","text":"<pre><code>// Bad\nreturn Result&lt;User&gt;.Failure(\"Invalid input\");\n\n// Good\nreturn Result&lt;User&gt;.Failure(\n    ErrorCode.ValidationError,\n    \"Invalid input\",\n    new Dictionary&lt;string, object&gt;\n    {\n        { \"Field\", \"Email\" },\n        { \"Value\", email }\n    }\n);\n</code></pre>"},{"location":"advanced-topics/best-practices/#validation","title":"Validation","text":""},{"location":"advanced-topics/best-practices/#combine-validation-results","title":"Combine Validation Results","text":"<pre><code>public ValidationResult ValidateUser(User user)\n{\n    return ValidationResult.Create()\n        .AddError(\"Name\", \"Name is required\")\n        .Combine(ValidateEmail(user.Email))\n        .Combine(ValidatePassword(user.Password));\n}\n</code></pre>"},{"location":"advanced-topics/best-practices/#keep-validation-rules-separate","title":"Keep Validation Rules Separate","text":"<pre><code>private ValidationResult ValidateEmail(string email)\n{\n    var result = ValidationResult.Create();\n\n    if (string.IsNullOrEmpty(email))\n        result = result.AddError(\"Email\", \"Email is required\");\n    else if (!IsValidEmail(email))\n        result = result.AddError(\"Email\", \"Email is invalid\");\n\n    return result;\n}\n</code></pre>"},{"location":"advanced-topics/best-practices/#async-operations","title":"Async Operations","text":""},{"location":"advanced-topics/best-practices/#use-async-methods-correctly","title":"Use Async Methods Correctly","text":"<pre><code>// Bad\npublic async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    var user = await _repository.GetUserAsync(id);\n    if (user == null)\n        return Result&lt;User&gt;.Failure(\"User not found\");\n    return Result&lt;User&gt;.Success(user);\n}\n\n// Good\npublic Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    return Result&lt;User&gt;.TryAsync(() =&gt; _repository.GetUserAsync(id));\n}\n</code></pre>"},{"location":"advanced-topics/best-practices/#use-async-chaining","title":"Use Async Chaining","text":"<pre><code>public async Task&lt;Result&lt;User&gt;&gt; ProcessUserAsync(int id)\n{\n    return await Result&lt;User&gt;.TryAsync(() =&gt; _repository.GetUserAsync(id))\n        .BindAsync(user =&gt; UpdateUserAsync(user))\n        .MapAsync(user =&gt; TransformUser(user));\n}\n</code></pre>"},{"location":"advanced-topics/best-practices/#performance","title":"Performance","text":""},{"location":"advanced-topics/best-practices/#avoid-unnecessary-result-transformations","title":"Avoid Unnecessary Result Transformations","text":"<pre><code>// Bad\nreturn Result&lt;User&gt;.Success(user).Map(u =&gt; u.Name);\n\n// Good\nreturn Result&lt;string&gt;.Success(user.Name);\n</code></pre>"},{"location":"advanced-topics/best-practices/#use-large-objects-carefully","title":"Use Large Objects Carefully","text":"<pre><code>// Bad\nreturn Result&lt;byte[]&gt;.Success(largeFile);\n\n// Good\nreturn Result&lt;Stream&gt;.Success(fileStream);\n</code></pre>"},{"location":"advanced-topics/best-practices/#testing","title":"Testing","text":""},{"location":"advanced-topics/best-practices/#test-results-correctly","title":"Test Results Correctly","text":"<pre><code>[Fact]\npublic void GetUser_WhenUserExists_ReturnsSuccess()\n{\n    // Arrange\n    var user = new User { Id = 1, Name = \"Test\" };\n    _repository.Setup(r =&gt; r.GetUser(1)).Returns(user);\n\n    // Act\n    var result = _service.GetUser(1);\n\n    // Assert\n    result.IsSuccess.Should().BeTrue();\n    result.Value.Should().BeEquivalentTo(user);\n}\n\n[Fact]\npublic void GetUser_WhenUserNotFound_ReturnsFailure()\n{\n    // Arrange\n    _repository.Setup(r =&gt; r.GetUser(1)).Returns((User)null);\n\n    // Act\n    var result = _service.GetUser(1);\n\n    // Assert\n    result.IsFailure.Should().BeTrue();\n    result.Error.Message.Should().Be(\"User not found\");\n}\n</code></pre>"},{"location":"advanced-topics/best-practices/#next-steps","title":"Next Steps","text":"<ul> <li>Performance</li> <li>Testing</li> <li>Integration </li> </ul>"},{"location":"advanced-topics/integration/","title":"Integration","text":""},{"location":"advanced-topics/integration/#overview","title":"Overview","text":"<p>This section explains how to integrate the TinyResult library with other libraries and frameworks.</p>"},{"location":"advanced-topics/integration/#aspnet-core-integration","title":"ASP.NET Core Integration","text":""},{"location":"advanced-topics/integration/#controller-integration","title":"Controller Integration","text":"<pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class UsersController : ControllerBase\n{\n    private readonly IUserService _userService;\n\n    public UsersController(IUserService userService)\n    {\n        _userService = userService;\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task&lt;IActionResult&gt; GetUser(int id)\n    {\n        var result = await _userService.GetUserAsync(id);\n        return result.Match(\n            user =&gt; Ok(user),\n            error =&gt; error.Code switch\n            {\n                ErrorCode.NotFound =&gt; NotFound(error.Message),\n                _ =&gt; StatusCode(500, error.Message)\n            }\n        );\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#middleware-integration","title":"Middleware Integration","text":"<pre><code>public class ResultMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public ResultMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            var error = Error.FromException(ex);\n            context.Response.StatusCode = GetStatusCode(error.Code);\n            await context.Response.WriteAsJsonAsync(new { error.Message });\n        }\n    }\n\n    private static int GetStatusCode(ErrorCode code) =&gt; code switch\n    {\n        ErrorCode.NotFound =&gt; 404,\n        ErrorCode.ValidationError =&gt; 400,\n        _ =&gt; 500\n    };\n}\n</code></pre>"},{"location":"advanced-topics/integration/#entity-framework-core-integration","title":"Entity Framework Core Integration","text":""},{"location":"advanced-topics/integration/#repository-pattern","title":"Repository Pattern","text":"<pre><code>public class UserRepository : IUserRepository\n{\n    private readonly DbContext _context;\n\n    public UserRepository(DbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n    {\n        return await Result&lt;User&gt;.TryAsync(async () =&gt;\n        {\n            var user = await _context.Users.FindAsync(id);\n            if (user == null)\n                return Result&lt;User&gt;.Failure(ErrorCode.NotFound, \"User not found\");\n            return Result&lt;User&gt;.Success(user);\n        });\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#unit-of-work-pattern","title":"Unit of Work Pattern","text":"<pre><code>public class UnitOfWork : IUnitOfWork\n{\n    private readonly DbContext _context;\n\n    public UnitOfWork(DbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task&lt;Result&lt;int&gt;&gt; SaveChangesAsync()\n    {\n        return await Result&lt;int&gt;.TryAsync(async () =&gt;\n        {\n            var changes = await _context.SaveChangesAsync();\n            return Result&lt;int&gt;.Success(changes);\n        });\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#mediatr-integration","title":"MediatR Integration","text":""},{"location":"advanced-topics/integration/#command-handler","title":"Command Handler","text":"<pre><code>public class CreateUserCommandHandler : IRequestHandler&lt;CreateUserCommand, Result&lt;User&gt;&gt;\n{\n    private readonly IUserRepository _repository;\n    private readonly IUserValidator _validator;\n\n    public CreateUserCommandHandler(IUserRepository repository, IUserValidator validator)\n    {\n        _repository = repository;\n        _validator = validator;\n    }\n\n    public async Task&lt;Result&lt;User&gt;&gt; Handle(CreateUserCommand request, CancellationToken cancellationToken)\n    {\n        var validationResult = _validator.Validate(request.User);\n        if (!validationResult.IsValid)\n            return Result&lt;User&gt;.Failure(validationResult.Errors);\n\n        return await _repository.CreateUserAsync(request.User);\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#query-handler","title":"Query Handler","text":"<pre><code>public class GetUserQueryHandler : IRequestHandler&lt;GetUserQuery, Result&lt;User&gt;&gt;\n{\n    private readonly IUserRepository _repository;\n\n    public GetUserQueryHandler(IUserRepository repository)\n    {\n        _repository = repository;\n    }\n\n    public async Task&lt;Result&lt;User&gt;&gt; Handle(GetUserQuery request, CancellationToken cancellationToken)\n    {\n        return await _repository.GetUserAsync(request.UserId);\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#automapper-integration","title":"AutoMapper Integration","text":""},{"location":"advanced-topics/integration/#profile-definition","title":"Profile Definition","text":"<pre><code>public class UserProfile : Profile\n{\n    public UserProfile()\n    {\n        CreateMap&lt;User, UserDto&gt;();\n        CreateMap&lt;CreateUserDto, User&gt;();\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#service-usage","title":"Service Usage","text":"<pre><code>public class UserService : IUserService\n{\n    private readonly IUserRepository _repository;\n    private readonly IMapper _mapper;\n\n    public UserService(IUserRepository repository, IMapper mapper)\n    {\n        _repository = repository;\n        _mapper = mapper;\n    }\n\n    public async Task&lt;Result&lt;UserDto&gt;&gt; GetUserAsync(int id)\n    {\n        return await _repository.GetUserAsync(id)\n            .MapAsync(user =&gt; _mapper.Map&lt;UserDto&gt;(user));\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#fluentvalidation-integration","title":"FluentValidation Integration","text":""},{"location":"advanced-topics/integration/#validator-definition","title":"Validator Definition","text":"<pre><code>public class UserValidator : AbstractValidator&lt;User&gt;\n{\n    public UserValidator()\n    {\n        RuleFor(x =&gt; x.Name).NotEmpty();\n        RuleFor(x =&gt; x.Email).EmailAddress();\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#service-usage_1","title":"Service Usage","text":"<pre><code>public class UserService : IUserService\n{\n    private readonly IUserRepository _repository;\n    private readonly IValidator&lt;User&gt; _validator;\n\n    public UserService(IUserRepository repository, IValidator&lt;User&gt; validator)\n    {\n        _repository = repository;\n        _validator = validator;\n    }\n\n    public async Task&lt;Result&lt;User&gt;&gt; CreateUserAsync(User user)\n    {\n        var validationResult = await _validator.ValidateAsync(user);\n        if (!validationResult.IsValid)\n        {\n            var errors = validationResult.Errors\n                .ToDictionary(e =&gt; e.PropertyName, e =&gt; e.ErrorMessage);\n            return Result&lt;User&gt;.Failure(ErrorCode.ValidationError, \"Validation failed\", errors);\n        }\n\n        return await _repository.CreateUserAsync(user);\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#serilog-integration","title":"Serilog Integration","text":""},{"location":"advanced-topics/integration/#logger-definition","title":"Logger Definition","text":"<pre><code>public static class ResultLogger\n{\n    private static readonly ILogger Log = Serilog.Log.ForContext&lt;ResultLogger&gt;();\n\n    public static void LogResult&lt;T&gt;(Result&lt;T&gt; result)\n    {\n        if (result.IsSuccess)\n            Log.Information(\"Operation succeeded: {Value}\", result.Value);\n        else\n            Log.Error(\"Operation failed: {Error}\", result.Error);\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#service-usage_2","title":"Service Usage","text":"<pre><code>public class UserService : IUserService\n{\n    private readonly IUserRepository _repository;\n\n    public UserService(IUserRepository repository)\n    {\n        _repository = repository;\n    }\n\n    public async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n    {\n        var result = await _repository.GetUserAsync(id);\n        ResultLogger.LogResult(result);\n        return result;\n    }\n}\n</code></pre>"},{"location":"advanced-topics/integration/#next-steps","title":"Next Steps","text":"<ul> <li>Best Practices</li> <li>Performance</li> <li>Testing </li> </ul>"},{"location":"advanced-topics/performance/","title":"Performance","text":""},{"location":"advanced-topics/performance/#overview","title":"Overview","text":"<p>This section covers the performance characteristics of the TinyResult library and techniques that can be used to optimize performance.</p>"},{"location":"advanced-topics/performance/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"advanced-topics/performance/#lightweight-design","title":"Lightweight Design","text":"<ul> <li>Result objects are designed as value types</li> <li>Unnecessary object creation and garbage collection overhead is minimized</li> <li>Memory usage is optimized</li> </ul>"},{"location":"advanced-topics/performance/#caching","title":"Caching","text":"<pre><code>// Cached result\nprivate static readonly Result&lt;string&gt; CachedSuccess = Result&lt;string&gt;.Success(\"Success\");\n\npublic Result&lt;string&gt; GetCachedResult()\n{\n    return CachedSuccess;\n}\n</code></pre>"},{"location":"advanced-topics/performance/#performance-tips","title":"Performance Tips","text":""},{"location":"advanced-topics/performance/#optimize-result-transformations","title":"Optimize Result Transformations","text":"<pre><code>// Bad - Unnecessary transformation\nreturn Result&lt;User&gt;.Success(user).Map(u =&gt; u.Name);\n\n// Good - Direct result creation\nreturn Result&lt;string&gt;.Success(user.Name);\n</code></pre>"},{"location":"advanced-topics/performance/#use-large-objects-wisely","title":"Use Large Objects Wisely","text":"<pre><code>// Bad - Copying large object\nreturn Result&lt;byte[]&gt;.Success(largeFile);\n\n// Good - Using stream\nreturn Result&lt;Stream&gt;.Success(fileStream);\n</code></pre>"},{"location":"advanced-topics/performance/#optimize-async-operations","title":"Optimize Async Operations","text":"<pre><code>// Bad - Unnecessary async/await\npublic async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    var user = await _repository.GetUserAsync(id);\n    return Result&lt;User&gt;.Success(user);\n}\n\n// Good - Direct Task return\npublic Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    return Result&lt;User&gt;.TryAsync(() =&gt; _repository.GetUserAsync(id));\n}\n</code></pre>"},{"location":"advanced-topics/performance/#performance-tests","title":"Performance Tests","text":""},{"location":"advanced-topics/performance/#result-creation-performance","title":"Result Creation Performance","text":"<pre><code>[Benchmark]\npublic Result&lt;string&gt; CreateSuccessResult()\n{\n    return Result&lt;string&gt;.Success(\"Test\");\n}\n\n[Benchmark]\npublic Result&lt;string&gt; CreateFailureResult()\n{\n    return Result&lt;string&gt;.Failure(\"Error\");\n}\n</code></pre>"},{"location":"advanced-topics/performance/#result-transformation-performance","title":"Result Transformation Performance","text":"<pre><code>[Benchmark]\npublic Result&lt;int&gt; MapResult()\n{\n    return Result&lt;string&gt;.Success(\"123\")\n        .Map(s =&gt; int.Parse(s));\n}\n\n[Benchmark]\npublic Result&lt;int&gt; BindResult()\n{\n    return Result&lt;string&gt;.Success(\"123\")\n        .Bind(s =&gt; Result&lt;int&gt;.Success(int.Parse(s)));\n}\n</code></pre>"},{"location":"advanced-topics/performance/#performance-measurements","title":"Performance Measurements","text":""},{"location":"advanced-topics/performance/#memory-usage","title":"Memory Usage","text":"<ul> <li>Successful result: ~24 bytes</li> <li>Failed result: ~40 bytes</li> <li>Error metadata: Variable</li> </ul>"},{"location":"advanced-topics/performance/#processing-time","title":"Processing Time","text":"<ul> <li>Result creation: ~10-20 ns</li> <li>Result transformation: ~20-30 ns</li> <li>Error handling: ~30-40 ns</li> </ul>"},{"location":"advanced-topics/performance/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"advanced-topics/performance/#result-pool-usage","title":"Result Pool Usage","text":"<pre><code>private static readonly ObjectPool&lt;Result&lt;string&gt;&gt; ResultPool = \n    new ObjectPool&lt;Result&lt;string&gt;&gt;(() =&gt; new Result&lt;string&gt;());\n\npublic Result&lt;string&gt; GetPooledResult()\n{\n    var result = ResultPool.Get();\n    // Use result\n    ResultPool.Return(result);\n    return result;\n}\n</code></pre>"},{"location":"advanced-topics/performance/#cached-errors","title":"Cached Errors","text":"<pre><code>private static readonly Dictionary&lt;string, Error&gt; ErrorCache = \n    new Dictionary&lt;string, Error&gt;();\n\npublic Error GetCachedError(string message)\n{\n    if (!ErrorCache.TryGetValue(message, out var error))\n    {\n        error = Error.Create(message);\n        ErrorCache[message] = error;\n    }\n    return error;\n}\n</code></pre>"},{"location":"advanced-topics/performance/#next-steps","title":"Next Steps","text":"<ul> <li>Best Practices</li> <li>Testing</li> <li>Integration </li> </ul>"},{"location":"advanced-topics/testing/","title":"Testing","text":""},{"location":"advanced-topics/testing/#overview","title":"Overview","text":"<p>This section covers testing techniques and best practices for working with the TinyResult library.</p>"},{"location":"advanced-topics/testing/#test-strategies","title":"Test Strategies","text":""},{"location":"advanced-topics/testing/#success-result-test","title":"Success Result Test","text":"<pre><code>[Fact]\npublic void GetUser_WhenUserExists_ReturnsSuccess()\n{\n    // Arrange\n    var user = new User { Id = 1, Name = \"Test\" };\n    _repository.Setup(r =&gt; r.GetUser(1)).Returns(user);\n\n    // Act\n    var result = _service.GetUser(1);\n\n    // Assert\n    result.IsSuccess.Should().BeTrue();\n    result.Value.Should().BeEquivalentTo(user);\n}\n</code></pre>"},{"location":"advanced-topics/testing/#failure-result-test","title":"Failure Result Test","text":"<pre><code>[Fact]\npublic void GetUser_WhenUserNotFound_ReturnsFailure()\n{\n    // Arrange\n    _repository.Setup(r =&gt; r.GetUser(1)).Returns((User)null);\n\n    // Act\n    var result = _service.GetUser(1);\n\n    // Assert\n    result.IsFailure.Should().BeTrue();\n    result.Error.Message.Should().Be(\"User not found\");\n}\n</code></pre>"},{"location":"advanced-topics/testing/#test-helpers","title":"Test Helpers","text":""},{"location":"advanced-topics/testing/#result-assertions","title":"Result Assertions","text":"<pre><code>public static class ResultAssertions\n{\n    public static void ShouldBeSuccess&lt;T&gt;(this Result&lt;T&gt; result, T expectedValue)\n    {\n        result.IsSuccess.Should().BeTrue();\n        result.Value.Should().BeEquivalentTo(expectedValue);\n    }\n\n    public static void ShouldBeFailure&lt;T&gt;(this Result&lt;T&gt; result, string expectedMessage)\n    {\n        result.IsFailure.Should().BeTrue();\n        result.Error.Message.Should().Be(expectedMessage);\n    }\n}\n</code></pre>"},{"location":"advanced-topics/testing/#test-data-creation","title":"Test Data Creation","text":"<pre><code>public static class ResultTestData\n{\n    public static Result&lt;User&gt; CreateSuccessResult()\n    {\n        return Result&lt;User&gt;.Success(new User { Id = 1, Name = \"Test\" });\n    }\n\n    public static Result&lt;User&gt; CreateFailureResult()\n    {\n        return Result&lt;User&gt;.Failure(\"Test error\");\n    }\n}\n</code></pre>"},{"location":"advanced-topics/testing/#async-tests","title":"Async Tests","text":""},{"location":"advanced-topics/testing/#async-success-test","title":"Async Success Test","text":"<pre><code>[Fact]\npublic async Task GetUserAsync_WhenUserExists_ReturnsSuccess()\n{\n    // Arrange\n    var user = new User { Id = 1, Name = \"Test\" };\n    _repository.Setup(r =&gt; r.GetUserAsync(1)).ReturnsAsync(user);\n\n    // Act\n    var result = await _service.GetUserAsync(1);\n\n    // Assert\n    result.IsSuccess.Should().BeTrue();\n    result.Value.Should().BeEquivalentTo(user);\n}\n</code></pre>"},{"location":"advanced-topics/testing/#async-failure-test","title":"Async Failure Test","text":"<pre><code>[Fact]\npublic async Task GetUserAsync_WhenRepositoryThrows_ReturnsFailure()\n{\n    // Arrange\n    _repository.Setup(r =&gt; r.GetUserAsync(1))\n        .ThrowsAsync(new Exception(\"Database error\"));\n\n    // Act\n    var result = await _service.GetUserAsync(1);\n\n    // Assert\n    result.IsFailure.Should().BeTrue();\n    result.Error.Message.Should().Be(\"Database error\");\n}\n</code></pre>"},{"location":"advanced-topics/testing/#validation-tests","title":"Validation Tests","text":""},{"location":"advanced-topics/testing/#validation-success-test","title":"Validation Success Test","text":"<pre><code>[Fact]\npublic void ValidateUser_WhenValid_ReturnsSuccess()\n{\n    // Arrange\n    var user = new User { Name = \"Test\", Email = \"test@example.com\" };\n\n    // Act\n    var result = _validator.Validate(user);\n\n    // Assert\n    result.IsValid.Should().BeTrue();\n    result.Errors.Should().BeEmpty();\n}\n</code></pre>"},{"location":"advanced-topics/testing/#validation-failure-test","title":"Validation Failure Test","text":"<pre><code>[Fact]\npublic void ValidateUser_WhenInvalid_ReturnsErrors()\n{\n    // Arrange\n    var user = new User { Name = \"\", Email = \"invalid\" };\n\n    // Act\n    var result = _validator.Validate(user);\n\n    // Assert\n    result.IsValid.Should().BeFalse();\n    result.Errors.Should().ContainKey(\"Name\")\n        .WhoseValue.Should().Be(\"Name is required\");\n    result.Errors.Should().ContainKey(\"Email\")\n        .WhoseValue.Should().Be(\"Email is invalid\");\n}\n</code></pre>"},{"location":"advanced-topics/testing/#mock-and-stub-usage","title":"Mock and Stub Usage","text":""},{"location":"advanced-topics/testing/#repository-mock","title":"Repository Mock","text":"<pre><code>public class UserServiceTests\n{\n    private readonly Mock&lt;IUserRepository&gt; _repository;\n    private readonly UserService _service;\n\n    public UserServiceTests()\n    {\n        _repository = new Mock&lt;IUserRepository&gt;();\n        _service = new UserService(_repository.Object);\n    }\n\n    [Fact]\n    public void GetUser_WhenUserExists_ReturnsSuccess()\n    {\n        // Arrange\n        var user = new User { Id = 1, Name = \"Test\" };\n        _repository.Setup(r =&gt; r.GetUser(1)).Returns(user);\n\n        // Act\n        var result = _service.GetUser(1);\n\n        // Assert\n        result.ShouldBeSuccess(user);\n        _repository.Verify(r =&gt; r.GetUser(1), Times.Once);\n    }\n}\n</code></pre>"},{"location":"advanced-topics/testing/#validator-stub","title":"Validator Stub","text":"<pre><code>public class UserRegistrationServiceTests\n{\n    private readonly Mock&lt;IUserValidator&gt; _validator;\n    private readonly UserRegistrationService _service;\n\n    public UserRegistrationServiceTests()\n    {\n        _validator = new Mock&lt;IUserValidator&gt;();\n        _service = new UserRegistrationService(_validator.Object);\n    }\n\n    [Fact]\n    public void RegisterUser_WhenValid_ReturnsSuccess()\n    {\n        // Arrange\n        var user = new User { Name = \"Test\" };\n        _validator.Setup(v =&gt; v.Validate(user))\n            .Returns(ValidationResult.Create());\n\n        // Act\n        var result = _service.RegisterUser(user);\n\n        // Assert\n        result.ShouldBeSuccess();\n    }\n}\n</code></pre>"},{"location":"advanced-topics/testing/#test-coverage","title":"Test Coverage","text":""},{"location":"advanced-topics/testing/#unit-test-coverage","title":"Unit Test Coverage","text":"<ul> <li>Result creation</li> <li>Result transformation</li> <li>Error handling</li> <li>Validation</li> <li>Async operations</li> </ul>"},{"location":"advanced-topics/testing/#integration-test-coverage","title":"Integration Test Coverage","text":"<ul> <li>Repository integration</li> <li>Service integration</li> <li>API integration</li> <li>Database integration</li> </ul>"},{"location":"advanced-topics/testing/#next-steps","title":"Next Steps","text":"<ul> <li>Best Practices</li> <li>Performance</li> <li>Integration </li> </ul>"},{"location":"api-reference/error/","title":"Error API Reference","text":""},{"location":"api-reference/error/#overview","title":"Overview","text":"<p>The <code>Error</code> class represents an error that occurred during an operation. It contains information about the error, including a code, message, and optional metadata.</p>"},{"location":"api-reference/error/#properties","title":"Properties","text":""},{"location":"api-reference/error/#code","title":"Code","text":"<p><pre><code>public ErrorCode Code { get; }\n</code></pre> Gets the error code that categorizes the error.</p>"},{"location":"api-reference/error/#message","title":"Message","text":"<p><pre><code>public string Message { get; }\n</code></pre> Gets the error message that describes what went wrong.</p>"},{"location":"api-reference/error/#metadata","title":"Metadata","text":"<p><pre><code>public IReadOnlyDictionary&lt;string, object&gt; Metadata { get; }\n</code></pre> Gets additional metadata about the error.</p>"},{"location":"api-reference/error/#static-factory-methods","title":"Static Factory Methods","text":""},{"location":"api-reference/error/#create","title":"Create","text":"<p><pre><code>public static Error Create(string message)\npublic static Error Create(ErrorCode code, string message)\npublic static Error Create(ErrorCode code, string message, Dictionary&lt;string, object&gt; metadata)\n</code></pre> Creates a new error with the specified information.</p>"},{"location":"api-reference/error/#fromexception","title":"FromException","text":"<p><pre><code>public static Error FromException(Exception exception)\npublic static Error FromException(Exception exception, ErrorCode code)\npublic static Error FromException(Exception exception, ErrorCode code, Dictionary&lt;string, object&gt; metadata)\n</code></pre> Creates a new error from an exception.</p>"},{"location":"api-reference/error/#instance-methods","title":"Instance Methods","text":""},{"location":"api-reference/error/#withmetadata","title":"WithMetadata","text":"<p><pre><code>public Error WithMetadata(string key, object value)\npublic Error WithMetadata(Dictionary&lt;string, object&gt; metadata)\n</code></pre> Creates a new error with additional metadata.</p>"},{"location":"api-reference/error/#tostring","title":"ToString","text":"<p><pre><code>public override string ToString()\n</code></pre> Returns a string representation of the error.</p>"},{"location":"api-reference/error/#examples","title":"Examples","text":""},{"location":"api-reference/error/#creating-errors","title":"Creating Errors","text":"<pre><code>// Simple error\nvar error = Error.Create(\"Operation failed\");\n\n// Coded error\nvar notFoundError = Error.Create(ErrorCode.NotFound, \"Resource not found\");\n\n// Error with metadata\nvar validationError = Error.Create(\n    ErrorCode.ValidationError,\n    \"Invalid input\",\n    new Dictionary&lt;string, object&gt; { { \"Field\", \"Name\" } }\n);\n\n// Error from exception\ntry\n{\n    // Some operation that might throw\n}\ncatch (Exception ex)\n{\n    var error = Error.FromException(ex, ErrorCode.InternalError);\n}\n</code></pre>"},{"location":"api-reference/error/#working-with-errors","title":"Working with Errors","text":"<pre><code>// Adding metadata\nvar detailedError = error.WithMetadata(\"Timestamp\", DateTime.UtcNow);\n\n// Combining metadata\nvar combinedError = error.WithMetadata(new Dictionary&lt;string, object&gt;\n{\n    { \"UserId\", 123 },\n    { \"Action\", \"Update\" }\n});\n\n// String representation\nConsole.WriteLine(error.ToString());\n// Output: Error[NotFound]: Resource not found\n</code></pre>"},{"location":"api-reference/error/#next-steps","title":"Next Steps","text":"<ul> <li>Result API Reference</li> <li>ValidationResult API Reference</li> <li>Extensions API Reference </li> </ul>"},{"location":"api-reference/extensions/","title":"Extensions API Reference","text":""},{"location":"api-reference/extensions/#overview","title":"Overview","text":"<p>The <code>ResultExtensions</code> class provides extension methods for working with <code>Result&lt;T&gt;</code> and <code>ValidationResult</code> types. These methods enable functional programming patterns and make working with results more convenient.</p>"},{"location":"api-reference/extensions/#result-extensions","title":"Result Extensions","text":""},{"location":"api-reference/extensions/#toresult","title":"ToResult","text":"<p><pre><code>public static Result&lt;T&gt; ToResult&lt;T&gt;(this T value)\n</code></pre> Converts a value to a successful result.</p>"},{"location":"api-reference/extensions/#tap","title":"Tap","text":"<p><pre><code>public static Result&lt;T&gt; Tap&lt;T&gt;(this Result&lt;T&gt; result, Action&lt;T&gt; action)\n</code></pre> Executes an action on a successful result's value and returns the original result.</p>"},{"location":"api-reference/extensions/#taperror","title":"TapError","text":"<p><pre><code>public static Result&lt;T&gt; TapError&lt;T&gt;(this Result&lt;T&gt; result, Action&lt;Error&gt; action)\n</code></pre> Executes an action on a failed result's error and returns the original result.</p>"},{"location":"api-reference/extensions/#select","title":"Select","text":"<p><pre><code>public static Result&lt;TResult&gt; Select&lt;T, TResult&gt;(this Result&lt;T&gt; result, Func&lt;T, TResult&gt; selector)\n</code></pre> Transforms a successful result's value using the specified selector function.</p>"},{"location":"api-reference/extensions/#selectmany","title":"SelectMany","text":"<p><pre><code>public static Result&lt;TResult&gt; SelectMany&lt;T, TResult&gt;(this Result&lt;T&gt; result, Func&lt;T, Result&lt;TResult&gt;&gt; selector)\n</code></pre> Transforms a successful result's value using the specified selector function that returns a new result.</p>"},{"location":"api-reference/extensions/#where","title":"Where","text":"<p><pre><code>public static Result&lt;T&gt; Where&lt;T&gt;(this Result&lt;T&gt; result, Func&lt;T, bool&gt; predicate, string errorMessage)\npublic static Result&lt;T&gt; Where&lt;T&gt;(this Result&lt;T&gt; result, Func&lt;T, bool&gt; predicate, Error error)\n</code></pre> Filters a successful result's value using the specified predicate.</p>"},{"location":"api-reference/extensions/#validate","title":"Validate","text":"<p><pre><code>public static Result&lt;T&gt; Validate&lt;T&gt;(this Result&lt;T&gt; result, Func&lt;T, ValidationResult&gt; validator)\n</code></pre> Validates a successful result's value using the specified validator function.</p>"},{"location":"api-reference/extensions/#transformerror","title":"TransformError","text":"<p><pre><code>public static Result&lt;T&gt; TransformError&lt;T&gt;(this Result&lt;T&gt; result, Func&lt;Error, Error&gt; transformer)\n</code></pre> Transforms a failed result's error using the specified transformer function.</p>"},{"location":"api-reference/extensions/#getvalueor","title":"GetValueOr","text":"<p><pre><code>public static T GetValueOr&lt;T&gt;(this Result&lt;T&gt; result, T defaultValue)\npublic static T GetValueOr&lt;T&gt;(this Result&lt;T&gt; result, Func&lt;T&gt; defaultValueFactory)\n</code></pre> Gets the value of a successful result or returns the specified default value.</p>"},{"location":"api-reference/extensions/#getvalueorasync","title":"GetValueOrAsync","text":"<p><pre><code>public static Task&lt;T&gt; GetValueOrAsync&lt;T&gt;(this Result&lt;T&gt; result, Func&lt;Task&lt;T&gt;&gt; defaultValueFactory)\n</code></pre> Asynchronously gets the value of a successful result or returns the specified default value.</p>"},{"location":"api-reference/extensions/#validationresult-extensions","title":"ValidationResult Extensions","text":""},{"location":"api-reference/extensions/#toresult_1","title":"ToResult","text":"<p><pre><code>public static Result&lt;T&gt; ToResult&lt;T&gt;(this ValidationResult validationResult, T value)\n</code></pre> Converts a validation result to a result with the specified value.</p>"},{"location":"api-reference/extensions/#combine","title":"Combine","text":"<p><pre><code>public static ValidationResult Combine(this ValidationResult first, ValidationResult second)\n</code></pre> Combines two validation results into a single result.</p>"},{"location":"api-reference/extensions/#examples","title":"Examples","text":""},{"location":"api-reference/extensions/#working-with-results","title":"Working with Results","text":"<pre><code>// Convert value to result\nvar result = \"Hello\".ToResult();\n\n// Tap into success\nresult = result.Tap(value =&gt; Console.WriteLine(value));\n\n// Transform value\nvar lengthResult = result.Select(s =&gt; s.Length);\n\n// Filter value\nvar nonEmptyResult = result.Where(s =&gt; s.Length &gt; 0, \"String cannot be empty\");\n\n// Validate value\nvar validatedResult = result.Validate(value =&gt; \n    ValidationResult.Create()\n        .AddError(\"Name\", \"Name is required\")\n);\n\n// Transform error\nvar transformedError = result.TransformError(error =&gt; \n    Error.Create(ErrorCode.InternalError, error.Message)\n);\n\n// Get value or default\nvar value = result.GetValueOr(\"Default\");\n</code></pre>"},{"location":"api-reference/extensions/#working-with-validation-results","title":"Working with Validation Results","text":"<pre><code>// Create validation results\nvar first = ValidationResult.Create()\n    .AddError(\"Name\", \"Name is required\");\n\nvar second = ValidationResult.Create()\n    .AddError(\"Email\", \"Email is invalid\");\n\n// Combine validation results\nvar combined = first.Combine(second);\n\n// Convert to result\nvar result = combined.ToResult(new User());\n</code></pre>"},{"location":"api-reference/extensions/#next-steps","title":"Next Steps <ul> <li>Result API Reference</li> <li>Error API Reference</li> <li>ValidationResult API Reference </li> </ul>","text":""},{"location":"api-reference/result/","title":"Result API Reference","text":""},{"location":"api-reference/result/#overview","title":"Overview","text":"<p>The <code>Result&lt;T&gt;</code> class is the core type in TinyResult that represents the outcome of an operation that can either succeed or fail. It provides a type-safe way to handle success and failure cases in your applications.</p>"},{"location":"api-reference/result/#properties","title":"Properties","text":""},{"location":"api-reference/result/#issuccess","title":"IsSuccess","text":"<p><pre><code>public bool IsSuccess { get; }\n</code></pre> Indicates whether the result represents a successful operation.</p>"},{"location":"api-reference/result/#isfailure","title":"IsFailure","text":"<p><pre><code>public bool IsFailure { get; }\n</code></pre> Indicates whether the result represents a failed operation.</p>"},{"location":"api-reference/result/#value","title":"Value","text":"<p><pre><code>public T? Value { get; }\n</code></pre> The value held by the result if it is successful. This property is null if the result is a failure.</p>"},{"location":"api-reference/result/#error","title":"Error","text":"<p><pre><code>public Error? Error { get; }\n</code></pre> The error held by the result if it is a failure. This property is null if the result is successful.</p>"},{"location":"api-reference/result/#static-methods","title":"Static Methods","text":""},{"location":"api-reference/result/#success","title":"Success","text":"<p><pre><code>public static Result&lt;T&gt; Success(T value)\n</code></pre> Creates a successful result with the specified value.</p> <p>Parameters: - <code>value</code>: The value to hold in the result.</p> <p>Returns: A new successful <code>Result&lt;T&gt;</code> instance.</p> <p>Example: <pre><code>var success = Result&lt;int&gt;.Success(42);\n</code></pre></p>"},{"location":"api-reference/result/#failure","title":"Failure","text":"<p><pre><code>public static Result&lt;T&gt; Failure(Error error)\npublic static Result&lt;T&gt; Failure(ErrorCode code, string message)\n</code></pre> Creates a failed result with the specified error.</p> <p>Parameters: - <code>error</code>: The error to hold in the result. - <code>code</code>: The error code. - <code>message</code>: The error message.</p> <p>Returns: A new failed <code>Result&lt;T&gt;</code> instance.</p> <p>Example: <pre><code>var failure = Result&lt;int&gt;.Failure(ErrorCode.NotFound, \"Value not found\");\n</code></pre></p>"},{"location":"api-reference/result/#fromtry","title":"FromTry","text":"<p><pre><code>public static Result&lt;T&gt; FromTry(Func&lt;T&gt; func, Func&lt;Exception, Error&gt; errorFactory)\n</code></pre> Creates a result from a function that might throw an exception.</p> <p>Parameters: - <code>func</code>: The function to execute. - <code>errorFactory</code>: The function to create an error from an exception.</p> <p>Returns: A new <code>Result&lt;T&gt;</code> instance.</p> <p>Example: <pre><code>var result = Result&lt;int&gt;.FromTry(\n    () =&gt; int.Parse(\"42\"),\n    ex =&gt; Error.Create(ErrorCode.InvalidOperation, ex.Message)\n);\n</code></pre></p>"},{"location":"api-reference/result/#instance-methods","title":"Instance Methods","text":""},{"location":"api-reference/result/#map","title":"Map","text":"<p><pre><code>public Result&lt;TResult&gt; Map&lt;TResult&gt;(Func&lt;T, TResult&gt; mapper)\n</code></pre> Transforms the value of a successful result using the specified function.</p> <p>Parameters: - <code>mapper</code>: The function to transform the value.</p> <p>Returns: A new result with the transformed value or the original error.</p> <p>Example: <pre><code>var result = Result&lt;int&gt;.Success(42)\n    .Map(x =&gt; x * 2);\n</code></pre></p>"},{"location":"api-reference/result/#bind","title":"Bind","text":"<p><pre><code>public Result&lt;TResult&gt; Bind&lt;TResult&gt;(Func&lt;T, Result&lt;TResult&gt;&gt; binder)\n</code></pre> Binds the result to another result using the specified function.</p> <p>Parameters: - <code>binder</code>: The function to bind the result.</p> <p>Returns: A new result with the bound value or the original error.</p> <p>Example: <pre><code>var result = Result&lt;int&gt;.Success(42)\n    .Bind(x =&gt; Result&lt;string&gt;.Success(x.ToString()));\n</code></pre></p>"},{"location":"api-reference/result/#match","title":"Match","text":"<p><pre><code>public TResult Match&lt;TResult&gt;(Func&lt;T, TResult&gt; onSuccess, Func&lt;Error, TResult&gt; onFailure)\n</code></pre> Handles both success and failure cases using the specified functions.</p> <p>Parameters: - <code>onSuccess</code>: The function to handle success. - <code>onFailure</code>: The function to handle failure.</p> <p>Returns: The result of the appropriate handler function.</p> <p>Example: <pre><code>var message = result.Match(\n    value =&gt; $\"Success: {value}\",\n    error =&gt; $\"Error: {error.Message}\"\n);\n</code></pre></p>"},{"location":"api-reference/result/#onsuccess","title":"OnSuccess","text":"<p><pre><code>public Result&lt;T&gt; OnSuccess(Action&lt;T&gt; action)\n</code></pre> Executes an action if the result is successful.</p> <p>Parameters: - <code>action</code>: The action to execute.</p> <p>Returns: The original result.</p> <p>Example: <pre><code>result.OnSuccess(value =&gt; Console.WriteLine($\"Value: {value}\"));\n</code></pre></p>"},{"location":"api-reference/result/#onfailure","title":"OnFailure","text":"<p><pre><code>public Result&lt;T&gt; OnFailure(Action&lt;Error&gt; action)\n</code></pre> Executes an action if the result has failed.</p> <p>Parameters: - <code>action</code>: The action to execute.</p> <p>Returns: The original result.</p> <p>Example: <pre><code>result.OnFailure(error =&gt; Console.WriteLine($\"Error: {error.Message}\"));\n</code></pre></p>"},{"location":"api-reference/result/#validate","title":"Validate","text":"<p><pre><code>public Result&lt;T&gt; Validate(Func&lt;T, bool&gt; predicate, ErrorCode errorCode, string errorMessage)\n</code></pre> Validates the result using the specified predicate.</p> <p>Parameters: - <code>predicate</code>: The predicate to validate the value. - <code>errorCode</code>: The error code to use if validation fails. - <code>errorMessage</code>: The error message to use if validation fails.</p> <p>Returns: A new result with the validated value or a failed result if validation fails.</p> <p>Example: <pre><code>var result = Result&lt;int&gt;.Success(42)\n    .Validate(x =&gt; x &gt; 0, ErrorCode.ValidationError, \"Value must be positive\");\n</code></pre></p>"},{"location":"api-reference/result/#catch","title":"Catch","text":"<p><pre><code>public Result&lt;T&gt; Catch(Func&lt;Error, Result&lt;T&gt;&gt; handler)\n</code></pre> Handles errors by transforming them into a new result.</p> <p>Parameters: - <code>handler</code>: The function to handle the error.</p> <p>Returns: A new result with the handled value or the original error.</p> <p>Example: <pre><code>var result = Result&lt;int&gt;.Failure(ErrorCode.NotFound, \"Not found\")\n    .Catch(error =&gt; Result&lt;int&gt;.Success(0));\n</code></pre></p>"},{"location":"api-reference/result/#getvalueor","title":"GetValueOr","text":"<p><pre><code>public T GetValueOr(T defaultValue)\npublic T GetValueOr(Func&lt;T&gt; func)\n</code></pre> Gets the value of the result if it is successful, or the specified default value if it has failed.</p> <p>Parameters: - <code>defaultValue</code>: The default value to return if the result has failed. - <code>func</code>: The function to get the default value if the result has failed.</p> <p>Returns: The value of the result if it is successful, or the default value if it has failed.</p> <p>Example: <pre><code>var value = result.GetValueOr(0);\nvar value = result.GetValueOr(() =&gt; GetDefaultValue());\n</code></pre></p>"},{"location":"api-reference/result/#getvalueorthrow","title":"GetValueOrThrow","text":"<p><pre><code>public T GetValueOrThrow()\npublic T GetValueOrThrow(Func&lt;Error, Exception&gt; exceptionFactory)\n</code></pre> Gets the value of the result if it is successful, or throws an exception if it has failed.</p> <p>Parameters: - <code>exceptionFactory</code>: The function to create an exception from an error.</p> <p>Returns: The value of the result if it is successful.</p> <p>Throws: An exception if the result has failed.</p> <p>Example: <pre><code>try\n{\n    var value = result.GetValueOrThrow();\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Error: {ex.Message}\");\n}\n</code></pre></p>"},{"location":"api-reference/result/#static-utility-methods","title":"Static Utility Methods","text":""},{"location":"api-reference/result/#combine","title":"Combine","text":"<p><pre><code>public static Result&lt;(T, T2)&gt; Combine&lt;T2&gt;(Result&lt;T&gt; result1, Result&lt;T2&gt; result2)\npublic static Result&lt;IEnumerable&lt;T&gt;&gt; Combine(IEnumerable&lt;Result&lt;T&gt;&gt; results)\n</code></pre> Combines multiple results into a single result.</p> <p>Parameters: - <code>result1</code>: The first result. - <code>result2</code>: The second result. - <code>results</code>: The results to combine.</p> <p>Returns: A new result with all values or the first error encountered.</p> <p>Example: <pre><code>var result1 = Result&lt;int&gt;.Success(42);\nvar result2 = Result&lt;string&gt;.Success(\"Hello\");\nvar combined = Result.Combine(result1, result2);\n\nvar results = new[] { result1, result2 };\nvar allResults = Result.Combine(results);\n</code></pre></p>"},{"location":"api-reference/result/#next-steps","title":"Next Steps","text":"<ul> <li>Error API Reference</li> <li>ValidationResult API Reference</li> <li>Extensions API Reference </li> </ul>"},{"location":"api-reference/validation-result/","title":"ValidationResult API Reference","text":""},{"location":"api-reference/validation-result/#overview","title":"Overview","text":"<p>The <code>ValidationResult</code> class represents the result of a validation operation. It contains information about validation errors and whether the validation was successful.</p>"},{"location":"api-reference/validation-result/#properties","title":"Properties","text":""},{"location":"api-reference/validation-result/#isvalid","title":"IsValid","text":"<p><pre><code>public bool IsValid { get; }\n</code></pre> Gets whether the validation was successful.</p>"},{"location":"api-reference/validation-result/#errors","title":"Errors","text":"<p><pre><code>public IReadOnlyDictionary&lt;string, string&gt; Errors { get; }\n</code></pre> Gets the validation errors as a read-only dictionary.</p>"},{"location":"api-reference/validation-result/#static-factory-methods","title":"Static Factory Methods","text":""},{"location":"api-reference/validation-result/#create","title":"Create","text":"<p><pre><code>public static ValidationResult Create()\n</code></pre> Creates a new validation result.</p>"},{"location":"api-reference/validation-result/#instance-methods","title":"Instance Methods","text":""},{"location":"api-reference/validation-result/#adderror","title":"AddError","text":"<p><pre><code>public ValidationResult AddError(string field, string message)\n</code></pre> Adds a validation error for the specified field.</p>"},{"location":"api-reference/validation-result/#adderrors","title":"AddErrors","text":"<p><pre><code>public ValidationResult AddErrors(IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; errors)\n</code></pre> Adds multiple validation errors.</p>"},{"location":"api-reference/validation-result/#clear","title":"Clear","text":"<p><pre><code>public ValidationResult Clear()\n</code></pre> Clears all validation errors.</p>"},{"location":"api-reference/validation-result/#examples","title":"Examples","text":""},{"location":"api-reference/validation-result/#creating-validation-results","title":"Creating Validation Results","text":"<pre><code>// Create a new validation result\nvar result = ValidationResult.Create();\n\n// Add a single error\nresult = result.AddError(\"Name\", \"Name is required\");\n\n// Add multiple errors\nresult = result.AddErrors(new Dictionary&lt;string, string&gt;\n{\n    { \"Email\", \"Email is invalid\" },\n    { \"Password\", \"Password must be at least 8 characters\" }\n});\n\n// Check validation status\nif (!result.IsValid)\n{\n    foreach (var error in result.Errors)\n    {\n        Console.WriteLine($\"{error.Key}: {error.Value}\");\n    }\n}\n\n// Clear errors\nresult = result.Clear();\n</code></pre>"},{"location":"api-reference/validation-result/#next-steps","title":"Next Steps","text":"<ul> <li>Result API Reference</li> <li>Error API Reference</li> <li>Extensions API Reference </li> </ul>"},{"location":"examples/advanced-examples/","title":"Advanced Examples","text":""},{"location":"examples/advanced-examples/#1-pipeline-operations","title":"1. Pipeline Operations","text":""},{"location":"examples/advanced-examples/#basic-pipeline","title":"Basic Pipeline","text":"<pre><code>public Result&lt;Order&gt; ProcessOrder(OrderRequest request)\n{\n    return ResultPipeline&lt;Order&gt;\n        .StartWith(request)\n        .Then(ValidateOrder)\n        .Then(CheckInventory)\n        .Then(CalculateTotal)\n        .Then(CreateOrder)\n        .Build();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#conditional-pipeline","title":"Conditional Pipeline","text":"<pre><code>public Result&lt;Order&gt; ProcessOrderWithDiscount(OrderRequest request)\n{\n    return ResultPipeline&lt;Order&gt;\n        .StartWith(request)\n        .Then(ValidateOrder)\n        .When(\n            order =&gt; order.Total &gt; 1000,\n            order =&gt; ApplyDiscount(order),\n            order =&gt; order\n        )\n        .Then(CreateOrder)\n        .Build();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#2-circuit-breaker-pattern","title":"2. Circuit Breaker Pattern","text":""},{"location":"examples/advanced-examples/#basic-usage","title":"Basic Usage","text":"<pre><code>public class OrderService\n{\n    private readonly ResultCircuitBreaker _circuitBreaker;\n\n    public OrderService()\n    {\n        _circuitBreaker = new ResultCircuitBreaker(\n            maxFailures: 3,\n            resetTimeout: TimeSpan.FromMinutes(1)\n        );\n    }\n\n    public async Task&lt;Result&lt;Order&gt;&gt; ProcessOrderAsync(OrderRequest request)\n    {\n        return await _circuitBreaker.ExecuteAsync(async () =&gt;\n        {\n            return await _orderRepository.CreateOrderAsync(request);\n        });\n    }\n}\n</code></pre>"},{"location":"examples/advanced-examples/#custom-error-handling","title":"Custom Error Handling","text":"<pre><code>public async Task&lt;Result&lt;Order&gt;&gt; ProcessOrderWithCustomHandling(OrderRequest request)\n{\n    return await _circuitBreaker.ExecuteAsync(\n        async () =&gt; await _orderRepository.CreateOrderAsync(request),\n        error =&gt; error.Code == ErrorCode.Timeout,\n        async () =&gt; await ProcessOrderWithFallbackAsync(request)\n    );\n}\n</code></pre>"},{"location":"examples/advanced-examples/#3-validation-pipeline","title":"3. Validation Pipeline","text":""},{"location":"examples/advanced-examples/#complex-validation","title":"Complex Validation","text":"<pre><code>public Result&lt;User&gt; ValidateUser(User user)\n{\n    return ResultPipeline&lt;User&gt;\n        .StartWith(user)\n        .Ensure(u =&gt; u.Email != null, \"Email cannot be null\")\n        .Ensure(u =&gt; IsValidEmail(u.Email), \"Invalid email format\")\n        .Ensure(u =&gt; u.Password != null, \"Password cannot be null\")\n        .Ensure(u =&gt; IsStrongPassword(u.Password), \"Weak password\")\n        .Then(ValidateUserAge)\n        .Then(ValidateUserLocation)\n        .Build();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#async-validation","title":"Async Validation","text":"<pre><code>public async Task&lt;Result&lt;User&gt;&gt; ValidateUserAsync(User user)\n{\n    return await ResultPipeline&lt;User&gt;\n        .StartWith(user)\n        .EnsureAsync(async u =&gt; await IsEmailUniqueAsync(u.Email), \"Email already in use\")\n        .EnsureAsync(async u =&gt; await IsUsernameAvailableAsync(u.Username), \"Username taken\")\n        .ThenAsync(async u =&gt; await ValidateUserLocationAsync(u))\n        .BuildAsync();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#4-retry-mechanism","title":"4. Retry Mechanism","text":""},{"location":"examples/advanced-examples/#basic-retry","title":"Basic Retry","text":"<pre><code>public async Task&lt;Result&lt;Data&gt;&gt; GetDataWithRetryAsync()\n{\n    return await ResultPipeline&lt;Data&gt;\n        .StartWith(() =&gt; GetDataAsync())\n        .WithRetry(\n            maxAttempts: 3,\n            delay: TimeSpan.FromSeconds(1)\n        )\n        .BuildAsync();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#conditional-retry","title":"Conditional Retry","text":"<pre><code>public async Task&lt;Result&lt;Data&gt;&gt; GetDataWithConditionalRetryAsync()\n{\n    return await ResultPipeline&lt;Data&gt;\n        .StartWith(() =&gt; GetDataAsync())\n        .WithRetry(\n            maxAttempts: 3,\n            delay: TimeSpan.FromSeconds(1),\n            shouldRetry: error =&gt; error.Code == ErrorCode.Timeout\n        )\n        .BuildAsync();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#5-timeout-management","title":"5. Timeout Management","text":""},{"location":"examples/advanced-examples/#basic-timeout","title":"Basic Timeout","text":"<pre><code>public async Task&lt;Result&lt;Data&gt;&gt; GetDataWithTimeoutAsync()\n{\n    return await ResultPipeline&lt;Data&gt;\n        .StartWith(() =&gt; GetDataAsync())\n        .WithTimeout(TimeSpan.FromSeconds(5))\n        .BuildAsync();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#custom-timeout-handling","title":"Custom Timeout Handling","text":"<pre><code>public async Task&lt;Result&lt;Data&gt;&gt; GetDataWithCustomTimeoutAsync()\n{\n    return await ResultPipeline&lt;Data&gt;\n        .StartWith(() =&gt; GetDataAsync())\n        .WithTimeout(\n            timeout: TimeSpan.FromSeconds(5),\n            onTimeout: () =&gt; Result&lt;Data&gt;.Failure(ErrorCode.Timeout, \"Operation timed out\")\n        )\n        .BuildAsync();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#6-parallel-operations","title":"6. Parallel Operations","text":""},{"location":"examples/advanced-examples/#parallel-result-processing","title":"Parallel Result Processing","text":"<pre><code>public async Task&lt;Result&lt;List&lt;Data&gt;&gt;&gt; ProcessDataInParallelAsync(List&lt;int&gt; ids)\n{\n    var tasks = ids.Select(id =&gt; ProcessDataAsync(id));\n    var results = await Task.WhenAll(tasks);\n\n    return results\n        .Aggregate(\n            Result&lt;List&lt;Data&gt;&gt;.Success(new List&lt;Data&gt;()),\n            (acc, result) =&gt; acc.Bind(dataList =&gt;\n                result.Map(data =&gt;\n                {\n                    dataList.Add(data);\n                    return dataList;\n                })\n            )\n        );\n}\n</code></pre>"},{"location":"examples/advanced-examples/#parallel-validation","title":"Parallel Validation","text":"<pre><code>public async Task&lt;Result&lt;List&lt;User&gt;&gt;&gt; ValidateUsersInParallelAsync(List&lt;User&gt; users)\n{\n    var validationTasks = users.Select(user =&gt; ValidateUserAsync(user));\n    var validationResults = await Task.WhenAll(validationTasks);\n\n    if (validationResults.All(r =&gt; r.IsSuccess))\n    {\n        return Result&lt;List&lt;User&gt;&gt;.Success(users);\n    }\n\n    var errors = validationResults\n        .Where(r =&gt; r.IsFailure)\n        .Select(r =&gt; r.Error)\n        .ToList();\n\n    return Result&lt;List&lt;User&gt;&gt;.Failure(\n        ErrorCode.ValidationError,\n        \"Some users failed validation\",\n        new Dictionary&lt;string, object&gt; { { \"Errors\", errors } }\n    );\n}\n</code></pre>"},{"location":"examples/advanced-examples/#7-event-sourcing","title":"7. Event Sourcing","text":""},{"location":"examples/advanced-examples/#event-processing","title":"Event Processing","text":"<pre><code>public Result&lt;Order&gt; ProcessOrderEvents(List&lt;OrderEvent&gt; events)\n{\n    return ResultPipeline&lt;Order&gt;\n        .StartWith(new Order())\n        .Then(order =&gt; events.Aggregate(\n            Result&lt;Order&gt;.Success(order),\n            (result, @event) =&gt; result.Bind(currentOrder =&gt;\n                ProcessEvent(currentOrder, @event)\n            )\n        ))\n        .Build();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#event-validation","title":"Event Validation","text":"<pre><code>public Result&lt;OrderEvent&gt; ValidateAndProcessEvent(OrderEvent @event)\n{\n    return ResultPipeline&lt;OrderEvent&gt;\n        .StartWith(@event)\n        .Ensure(e =&gt; e.Timestamp &lt;= DateTime.UtcNow, \"Event cannot be in the future\")\n        .Ensure(e =&gt; e.Version &gt; 0, \"Invalid version\")\n        .Then(ValidateEventData)\n        .Then(ApplyEvent)\n        .Build();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#1-resultfactory-usage","title":"1. ResultFactory Usage","text":""},{"location":"examples/advanced-examples/#http-requests","title":"HTTP Requests","text":"<pre><code>public async Task&lt;Result&lt;User&gt;&gt; GetUserFromApiAsync(int userId)\n{\n    var response = await _httpClient.GetAsync($\"api/users/{userId}\");\n    return ResultFactory.FromHttpResponse(\n        response,\n        content =&gt; JsonSerializer.Deserialize&lt;User&gt;(content)\n    );\n}\n</code></pre>"},{"location":"examples/advanced-examples/#database-operations","title":"Database Operations","text":"<pre><code>public Result&lt;User&gt; GetUserFromDatabase(int userId)\n{\n    return ResultFactory.FromDatabaseOperation(\n        () =&gt; _dbContext.Users.Find(userId),\n        \"GetUser\"\n    );\n}\n</code></pre>"},{"location":"examples/advanced-examples/#file-operations","title":"File Operations","text":"<pre><code>public Result&lt;string&gt; ReadConfigFile(string filePath)\n{\n    return ResultFactory.FromFileOperation(\n        filePath,\n        content =&gt; JsonSerializer.Deserialize&lt;Config&gt;(content)\n    );\n}\n</code></pre>"},{"location":"examples/advanced-examples/#2-resultpipeline-usage","title":"2. ResultPipeline Usage","text":""},{"location":"examples/advanced-examples/#order-processing","title":"Order Processing","text":"<pre><code>public async Task&lt;Result&lt;Order&gt;&gt; ProcessOrderAsync(OrderRequest request)\n{\n    return await ResultPipeline&lt;Order&gt;\n        .Start(request)\n        .Then(ValidateOrderRequest)\n        .ThenAsync(async validRequest =&gt; await CheckInventoryAsync(validRequest))\n        .ThenAsync(async inventory =&gt; await CalculateTotalAsync(inventory))\n        .ThenAsync(async total =&gt; await ProcessPaymentAsync(total))\n        .ThenAsync(async payment =&gt; await CreateOrderAsync(payment))\n        .WithTimeout(TimeSpan.FromSeconds(30))\n        .WithRetry(3, TimeSpan.FromSeconds(1))\n        .BuildAsync();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#user-registration","title":"User Registration","text":"<pre><code>public async Task&lt;Result&lt;User&gt;&gt; RegisterUserAsync(UserRegistration request)\n{\n    return await ResultPipeline&lt;User&gt;\n        .Start(request)\n        .Then(ValidateUserData)\n        .ThenAsync(async validData =&gt; await CheckEmailAvailabilityAsync(validData))\n        .ThenAsync(async available =&gt; await HashPasswordAsync(available))\n        .ThenAsync(async hashed =&gt; await CreateUserAsync(hashed))\n        .ThenAsync(async user =&gt; await SendWelcomeEmailAsync(user))\n        .BuildAsync();\n}\n</code></pre>"},{"location":"examples/advanced-examples/#complex-validation_1","title":"Complex Validation","text":"<pre><code>public Result&lt;User&gt; ValidateAndCreateUser(UserRequest request)\n{\n    var validationResult = ValidationResult.Create()\n        .AddErrorIf(string.IsNullOrEmpty(request.Name), \"Name\", \"Name is required\")\n        .AddErrorIf(!IsValidEmail(request.Email), \"Email\", \"Invalid email format\")\n        .AddErrorIf(request.Age &lt; 18, \"Age\", \"User must be at least 18 years old\");\n\n    if (!validationResult.IsValid)\n    {\n        return Result&lt;User&gt;.Failure(\n            Error.Create(\n                ErrorCode.ValidationError,\n                \"Validation failed\",\n                new Dictionary&lt;string, object&gt; { { \"Errors\", validationResult.Errors } }\n            )\n        );\n    }\n\n    return Result&lt;User&gt;.Success(new User\n    {\n        Name = request.Name,\n        Email = request.Email,\n        Age = request.Age\n    });\n}\n</code></pre>"},{"location":"examples/advanced-examples/#parallel-operations","title":"Parallel Operations","text":"<pre><code>public async Task&lt;Result&lt;(User, Order)&gt;&gt; GetUserAndOrderAsync(int userId, int orderId)\n{\n    var userTask = GetUserAsync(userId);\n    var orderTask = GetOrderAsync(orderId);\n\n    await Task.WhenAll(userTask, orderTask);\n\n    var userResult = await userTask;\n    var orderResult = await orderTask;\n\n    return Result&lt;(User, Order)&gt;.Combine(userResult, orderResult);\n}\n</code></pre>"},{"location":"examples/advanced-examples/#detailed-error-information","title":"Detailed Error Information","text":"<pre><code>public Result&lt;Order&gt; ProcessOrder(OrderRequest request)\n{\n    try\n    {\n        var order = CreateOrder(request);\n        return Result&lt;Order&gt;.Success(order);\n    }\n    catch (Exception ex)\n    {\n        return Result&lt;Order&gt;.Failure(\n            Error.Create(\n                ErrorCode.InvalidOperation,\n                \"Failed to process order\",\n                new Dictionary&lt;string, object&gt;\n                {\n                    { \"Request\", request },\n                    { \"Exception\", ex },\n                    { \"Timestamp\", DateTime.UtcNow }\n                }\n            )\n        );\n    }\n}\n</code></pre>"},{"location":"examples/advanced-examples/#error-transformation","title":"Error Transformation","text":"<pre><code>public Result&lt;User&gt; GetUser(int userId)\n{\n    return ResultFactory.FromDatabaseOperation(\n        () =&gt; _dbContext.Users.Find(userId),\n        \"GetUser\"\n    ).Catch(error =&gt;\n    {\n        if (error.Code == ErrorCode.DatabaseError)\n        {\n            return Result&lt;User&gt;.Failure(\n                Error.Create(\n                    ErrorCode.NotFound,\n                    \"User not found\",\n                    new Dictionary&lt;string, object&gt; { { \"UserId\", userId } }\n                )\n            );\n        }\n        return Result&lt;User&gt;.Failure(error);\n    });\n}\n</code></pre>"},{"location":"examples/advanced-examples/#6-getvalueor-methods","title":"6. GetValueOr* Methods","text":""},{"location":"examples/advanced-examples/#default-values","title":"Default Values","text":"<pre><code>public string GetUserName(Result&lt;User&gt; userResult)\n{\n    return userResult.GetValueOr(user =&gt; user.Name, () =&gt; \"Anonymous\");\n}\n</code></pre>"},{"location":"examples/advanced-examples/#alternative-operations-on-error","title":"Alternative Operations on Error","text":"<pre><code>public async Task&lt;string&gt; GetUserDataAsync(int userId)\n{\n    var userResult = await GetUserAsync(userId);\n\n    return await userResult.GetValueOrAsync(\n        user =&gt; Task.FromResult(user.Data),\n        async error =&gt; await GetDefaultUserDataAsync()\n    );\n}\n</code></pre>"},{"location":"examples/advanced-examples/#exception-throwing","title":"Exception Throwing","text":"<pre><code>public User GetUserOrThrow(Result&lt;User&gt; userResult)\n{\n    return userResult.GetValueOrThrow(\n        error =&gt; new UserNotFoundException($\"User not found: {error.Message}\")\n    );\n}\n</code></pre>"},{"location":"examples/advanced-examples/#next-steps","title":"Next Steps","text":"<ul> <li>Real World Scenarios</li> <li>API Reference</li> <li>Advanced Topics </li> </ul>"},{"location":"examples/basic-examples/","title":"Basic Examples","text":""},{"location":"examples/basic-examples/#1-basic-result-operations","title":"1. Basic Result Operations","text":""},{"location":"examples/basic-examples/#creating-successful-results","title":"Creating Successful Results","text":"<pre><code>// Simple successful result\nvar successResult = Result&lt;string&gt;.Success(\"Operation successful\");\n\n// Valued successful result\nvar userResult = Result&lt;User&gt;.Success(new User { Id = 1, Name = \"John\" });\n\n// Nullable value to result\nstring? name = \"John\";\nvar nameResult = name.ToResult(\"Name cannot be null\");\n\n// Value with validation\nvar ageResult = 25.ToResult(\n    age =&gt; age &gt;= 18,\n    \"Age must be at least 18\"\n);\n</code></pre>"},{"location":"examples/basic-examples/#creating-failed-results","title":"Creating Failed Results","text":"<pre><code>// Simple error\nvar errorResult = Result&lt;string&gt;.Failure(\"An error occurred\");\n\n// Coded error\nvar notFoundResult = Result&lt;User&gt;.Failure(ErrorCode.NotFound, \"User not found\");\n\n// Detailed error with metadata\nvar validationError = Result&lt;User&gt;.Failure(\n    ErrorCode.ValidationError,\n    \"Invalid user information\",\n    new Dictionary&lt;string, object&gt; \n    { \n        { \"Field\", \"Email\" },\n        { \"Value\", \"invalid-email\" },\n        { \"Timestamp\", DateTime.UtcNow }\n    }\n);\n\n// From exception\ntry\n{\n    // Some operation that might throw\n}\ncatch (Exception ex)\n{\n    var errorResult = Result&lt;int&gt;.Failure(\n        Error.FromException(ex, ErrorCode.InvalidOperation)\n    );\n}\n</code></pre>"},{"location":"examples/basic-examples/#2-result-checking","title":"2. Result Checking","text":""},{"location":"examples/basic-examples/#basic-checks","title":"Basic Checks","text":"<pre><code>// Success check\nif (result.IsSuccess)\n{\n    var value = result.Value;\n    // Operations\n}\n\n// Error check\nif (result.IsFailure)\n{\n    var error = result.Error;\n    // Error handling\n}\n\n// Pattern matching\nswitch (result)\n{\n    case { IsSuccess: true } success:\n        Console.WriteLine($\"Success: {success.Value}\");\n        break;\n    case { IsFailure: true } failure:\n        Console.WriteLine($\"Error: {failure.Error.Message}\");\n        break;\n}\n</code></pre>"},{"location":"examples/basic-examples/#using-match","title":"Using Match","text":"<pre><code>// Processing with Match\nvar message = result.Match(\n    value =&gt; $\"Success: {value}\",\n    error =&gt; $\"Error: {error.Message}\"\n);\n\n// Performing operations with Match\nresult.Match(\n    value =&gt; ProcessValue(value),\n    error =&gt; HandleError(error)\n);\n\n// Async Match\nawait result.MatchAsync(\n    async value =&gt; await ProcessValueAsync(value),\n    async error =&gt; await HandleErrorAsync(error)\n);\n</code></pre>"},{"location":"examples/basic-examples/#3-value-transformations","title":"3. Value Transformations","text":""},{"location":"examples/basic-examples/#using-map","title":"Using Map","text":"<pre><code>// Simple transformation\nvar lengthResult = result.Map(value =&gt; value.Length);\n\n// Complex transformation\nvar userDtoResult = result.Map(user =&gt; new UserDto\n{\n    Id = user.Id,\n    FullName = $\"{user.FirstName} {user.LastName}\"\n});\n\n// Async Map\nvar asyncResult = await result.MapAsync(async value =&gt; \n    await ProcessValueAsync(value)\n);\n</code></pre>"},{"location":"examples/basic-examples/#using-bind","title":"Using Bind","text":"<pre><code>// Chaining operations\nvar finalResult = result\n    .Bind(value =&gt; ProcessValue(value))\n    .Bind(processed =&gt; SaveValue(processed));\n\n// Conditional operations\nvar conditionalResult = result\n    .Bind(value =&gt; value.IsValid \n        ? ProcessValidValue(value)\n        : Result&lt;T&gt;.Failure(\"Invalid value\"));\n\n// Async Bind\nvar asyncResult = await result.BindAsync(async value =&gt; \n    await ProcessValueAsync(value)\n);\n</code></pre>"},{"location":"examples/basic-examples/#4-error-handling","title":"4. Error Handling","text":""},{"location":"examples/basic-examples/#try-catch-like-usage","title":"Try-Catch Like Usage","text":"<pre><code>// Try-Catch like\nvar safeResult = Result.Try(() =&gt; RiskyOperation());\n\n// Async Try-Catch\nvar asyncSafeResult = await Result.TryAsync(\n    async () =&gt; await RiskyOperationAsync()\n);\n\n// With custom error handler\nvar result = Result.Try(\n    () =&gt; RiskyOperation(),\n    ex =&gt; new Error(ErrorCode.InvalidOperation, ex.Message)\n);\n</code></pre>"},{"location":"examples/basic-examples/#error-recovery","title":"Error Recovery","text":"<pre><code>// Using Catch\nvar recoveredResult = result.Catch(error =&gt;\n{\n    if (error.Code == ErrorCode.NotFound)\n    {\n        return Result&lt;T&gt;.Success(GetDefaultValue());\n    }\n    return Result&lt;T&gt;.Failure(error);\n});\n\n// Using Catch with predicate\nvar specificRecovery = result.Catch(\n    error =&gt; error.Code == ErrorCode.ValidationError,\n    error =&gt; Result&lt;T&gt;.Success(GetDefaultValue())\n);\n</code></pre>"},{"location":"examples/basic-examples/#5-value-extraction","title":"5. Value Extraction","text":""},{"location":"examples/basic-examples/#safe-value-access","title":"Safe Value Access","text":"<pre><code>// Get value or default\nvar value = result.GetValueOrDefault(\"default\");\n\n// Get value or execute function\nvar value = result.GetValueOr(() =&gt; GetDefaultValue());\n\n// Get value or throw\ntry\n{\n    var value = result.GetValueOrThrow();\n}\ncatch (Exception ex)\n{\n    // Handle exception\n}\n\n// Get value or throw custom exception\nvar value = result.GetValueOrThrow(\n    error =&gt; new CustomException(error.Message)\n);\n</code></pre>"},{"location":"examples/basic-examples/#async-value-access","title":"Async Value Access","text":"<pre><code>// Get value or default async\nvar value = await result.GetValueOrAsync(\n    async () =&gt; await GetDefaultValueAsync()\n);\n\n// Get value or execute async function\nvar value = await result.GetValueOrAsync(\n    async error =&gt; await HandleErrorAsync(error)\n);\n</code></pre>"},{"location":"examples/basic-examples/#6-validation-operations","title":"6. Validation Operations","text":""},{"location":"examples/basic-examples/#basic-validation","title":"Basic Validation","text":"<pre><code>// Single condition\nvar validatedResult = result.Validate(\n    value =&gt; value != null,\n    \"Value cannot be null\");\n\n// Multiple conditions\nvar multiValidatedResult = result.Validate(\n    value =&gt; new[]\n    {\n        (value != null, \"Value cannot be null\"),\n        (value.Length &gt; 0, \"Value length must be greater than 0\")\n    });\n</code></pre>"},{"location":"examples/basic-examples/#async-validation","title":"Async Validation","text":"<pre><code>// Async validation\nvar asyncValidatedResult = await result.ValidateAsync(\n    async value =&gt; await IsValidAsync(value));\n</code></pre>"},{"location":"examples/basic-examples/#7-collection-operations","title":"7. Collection Operations","text":""},{"location":"examples/basic-examples/#processing-result-lists","title":"Processing Result Lists","text":"<pre><code>// Filtering successful results\nvar successes = results.Where(r =&gt; r.IsSuccess);\n\n// Extracting values\nvar values = results\n    .Where(r =&gt; r.IsSuccess)\n    .Select(r =&gt; r.Value);\n\n// Combining results\nvar combinedResult = results.Combine();\n</code></pre>"},{"location":"examples/basic-examples/#8-api-integration","title":"8. API Integration","text":""},{"location":"examples/basic-examples/#controller-usage","title":"Controller Usage","text":"<pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class UsersController : ControllerBase\n{\n    [HttpGet(\"{id}\")]\n    public IActionResult GetUser(int id)\n    {\n        return _userService.GetUser(id)\n            .Match(\n                user =&gt; Ok(user),\n                error =&gt; StatusCode(GetStatusCode(error.Code), error.Message)\n            );\n    }\n}\n</code></pre>"},{"location":"examples/basic-examples/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Examples</li> <li>Real World Scenarios</li> <li>API Reference </li> </ul>"},{"location":"examples/real-world-scenarios/","title":"Real World Scenarios","text":""},{"location":"examples/real-world-scenarios/#1-e-commerce-system","title":"1. E-Commerce System","text":""},{"location":"examples/real-world-scenarios/#order-processing","title":"Order Processing","text":"<pre><code>public class OrderService\n{\n    public async Task&lt;Result&lt;Order&gt;&gt; ProcessOrderAsync(OrderRequest request)\n    {\n        return await ResultPipeline&lt;Order&gt;\n            .Start(request)\n            .Then(ValidateOrderRequest)\n            .ThenAsync(async validRequest =&gt; await CheckInventoryAsync(validRequest))\n            .ThenAsync(async inventory =&gt; await CalculateTotalAsync(inventory))\n            .ThenAsync(async total =&gt; await ProcessPaymentAsync(total))\n            .ThenAsync(async payment =&gt; await CreateOrderAsync(payment))\n            .ThenAsync(async order =&gt; await SendConfirmationEmailAsync(order))\n            .WithRetry(maxAttempts: 3, delay: TimeSpan.FromSeconds(1))\n            .WithTimeout(TimeSpan.FromSeconds(30))\n            .BuildAsync();\n    }\n\n    private Result&lt;OrderRequest&gt; ValidateOrderRequest(OrderRequest request)\n    {\n        var validationResult = ValidationResult.Create()\n            .AddErrorIf(request.Items.Count == 0, \"Items\", \"Order must contain at least one item\")\n            .AddErrorIf(request.ShippingAddress == null, \"ShippingAddress\", \"Shipping address is required\")\n            .AddErrorIf(request.PaymentMethod == null, \"PaymentMethod\", \"Payment method is required\");\n\n        return validationResult.IsValid\n            ? Result&lt;OrderRequest&gt;.Success(request)\n            : Result&lt;OrderRequest&gt;.Failure(\n                Error.Create(\n                    ErrorCode.ValidationError,\n                    \"Invalid order request\",\n                    new Dictionary&lt;string, object&gt; { { \"Errors\", validationResult.Errors } }\n                )\n            );\n    }\n}\n</code></pre>"},{"location":"examples/real-world-scenarios/#inventory-management","title":"Inventory Management","text":"<pre><code>public class InventoryService\n{\n    private readonly ResultCircuitBreaker _circuitBreaker;\n\n    public InventoryService()\n    {\n        _circuitBreaker = new ResultCircuitBreaker(\n            maxFailures: 5,\n            resetTimeout: TimeSpan.FromMinutes(5)\n        );\n    }\n\n    public async Task&lt;Result&lt;Inventory&gt;&gt; UpdateInventoryAsync(InventoryUpdate update)\n    {\n        return await _circuitBreaker.ExecuteAsync(async () =&gt;\n        {\n            return await ResultPipeline&lt;Inventory&gt;\n                .Start(update)\n                .Then(ValidateInventoryUpdate)\n                .ThenAsync(async validUpdate =&gt; await CheckStockLevelsAsync(validUpdate))\n                .ThenAsync(async levels =&gt; await UpdateStockAsync(levels))\n                .ThenAsync(async updated =&gt; await LogInventoryChangeAsync(updated))\n                .BuildAsync();\n        });\n    }\n}\n</code></pre>"},{"location":"examples/real-world-scenarios/#2-financial-operations","title":"2. Financial Operations","text":""},{"location":"examples/real-world-scenarios/#money-transfer","title":"Money Transfer","text":"<pre><code>public class TransferService\n{\n    public async Task&lt;Result&lt;Transfer&gt;&gt; ProcessTransferAsync(TransferRequest request)\n    {\n        return await ResultPipeline&lt;Transfer&gt;\n            .Start(request)\n            .Then(ValidateTransferRequest)\n            .ThenAsync(async validRequest =&gt; await CheckAccountBalanceAsync(validRequest))\n            .ThenAsync(async balance =&gt; await VerifyTransferLimitAsync(balance))\n            .ThenAsync(async verified =&gt; await ExecuteTransferAsync(verified))\n            .ThenAsync(async transfer =&gt; await SendTransferNotificationAsync(transfer))\n            .WithTimeout(TimeSpan.FromSeconds(60))\n            .WithRetry(3, TimeSpan.FromSeconds(5))\n            .BuildAsync();\n    }\n\n    private Result&lt;TransferRequest&gt; ValidateTransferRequest(TransferRequest request)\n    {\n        var validationResult = ValidationResult.Create()\n            .AddErrorIf(request.Amount &lt;= 0, \"Amount\", \"Transfer amount must be positive\")\n            .AddErrorIf(request.SourceAccountId == request.TargetAccountId, \"Accounts\", \"Source and target accounts must be different\")\n            .AddErrorIf(string.IsNullOrEmpty(request.Description), \"Description\", \"Transfer description is required\");\n\n        return validationResult.IsValid\n            ? Result&lt;TransferRequest&gt;.Success(request)\n            : Result&lt;TransferRequest&gt;.Failure(\n                Error.Create(\n                    ErrorCode.ValidationError,\n                    \"Invalid transfer request\",\n                    new Dictionary&lt;string, object&gt; { { \"Errors\", validationResult.Errors } }\n                )\n            );\n    }\n}\n</code></pre>"},{"location":"examples/real-world-scenarios/#credit-application","title":"Credit Application","text":"<pre><code>public class CreditApplicationService\n{\n    public async Task&lt;Result&lt;CreditApplication&gt;&gt; ProcessApplicationAsync(CreditApplication application)\n    {\n        return await ResultPipeline&lt;CreditApplication&gt;\n            .StartWith(application)\n            .Then(ValidateApplication)\n            .ThenAsync(async validApp =&gt; await CheckCreditScoreAsync(validApp))\n            .ThenAsync(async score =&gt; await VerifyIncomeAsync(score))\n            .ThenAsync(async income =&gt; await CalculateRiskAsync(income))\n            .ThenAsync(async risk =&gt; await MakeDecisionAsync(risk))\n            .ThenAsync(async decision =&gt; await NotifyApplicantAsync(decision))\n            .WithTimeout(TimeSpan.FromMinutes(5))\n            .BuildAsync();\n    }\n}\n</code></pre>"},{"location":"examples/real-world-scenarios/#3-user-management-system","title":"3. User Management System","text":""},{"location":"examples/real-world-scenarios/#user-registration","title":"User Registration","text":"<pre><code>public class UserService\n{\n    public async Task&lt;Result&lt;User&gt;&gt; RegisterUserAsync(UserRegistration request)\n    {\n        return await ResultPipeline&lt;User&gt;\n            .Start(request)\n            .Then(ValidateUserData)\n            .ThenAsync(async validData =&gt; await CheckEmailAvailabilityAsync(validData))\n            .ThenAsync(async available =&gt; await HashPasswordAsync(available))\n            .ThenAsync(async hashed =&gt; await CreateUserAsync(hashed))\n            .ThenAsync(async user =&gt; await SendWelcomeEmailAsync(user))\n            .BuildAsync();\n    }\n\n    private Result&lt;UserRegistration&gt; ValidateUserData(UserRegistration request)\n    {\n        var validationResult = ValidationResult.Create()\n            .AddErrorIf(string.IsNullOrEmpty(request.Email), \"Email\", \"Email is required\")\n            .AddErrorIf(!IsValidEmail(request.Email), \"Email\", \"Invalid email format\")\n            .AddErrorIf(string.IsNullOrEmpty(request.Password), \"Password\", \"Password is required\")\n            .AddErrorIf(request.Password.Length &lt; 8, \"Password\", \"Password must be at least 8 characters\")\n            .AddErrorIf(request.Age &lt; 18, \"Age\", \"User must be at least 18 years old\");\n\n        return validationResult.IsValid\n            ? Result&lt;UserRegistration&gt;.Success(request)\n            : Result&lt;UserRegistration&gt;.Failure(\n                Error.Create(\n                    ErrorCode.ValidationError,\n                    \"Invalid user registration data\",\n                    new Dictionary&lt;string, object&gt; { { \"Errors\", validationResult.Errors } }\n                )\n            );\n    }\n}\n</code></pre>"},{"location":"examples/real-world-scenarios/#4-api-gateway","title":"4. API Gateway","text":""},{"location":"examples/real-world-scenarios/#request-processing","title":"Request Processing","text":"<pre><code>public class ApiGateway\n{\n    public async Task&lt;Result&lt;ApiResponse&gt;&gt; ProcessRequestAsync(ApiRequest request)\n    {\n        return await ResultPipeline&lt;ApiResponse&gt;\n            .Start(request)\n            .Then(ValidateApiRequest)\n            .ThenAsync(async validRequest =&gt; await AuthenticateRequestAsync(validRequest))\n            .ThenAsync(async authenticated =&gt; await AuthorizeRequestAsync(authenticated))\n            .ThenAsync(async authorized =&gt; await RateLimitRequestAsync(authorized))\n            .ThenAsync(async limited =&gt; await ProcessRequestAsync(limited))\n            .ThenAsync(async response =&gt; await LogRequestAsync(response))\n            .WithTimeout(TimeSpan.FromSeconds(10))\n            .WithRetry(2, TimeSpan.FromSeconds(1))\n            .BuildAsync();\n    }\n\n    private Result&lt;ApiRequest&gt; ValidateApiRequest(ApiRequest request)\n    {\n        var validationResult = ValidationResult.Create()\n            .AddErrorIf(string.IsNullOrEmpty(request.Endpoint), \"Endpoint\", \"API endpoint is required\")\n            .AddErrorIf(request.Headers == null, \"Headers\", \"Request headers are required\")\n            .AddErrorIf(request.Timestamp &gt; DateTime.UtcNow.AddMinutes(5), \"Timestamp\", \"Request timestamp is too far in the future\");\n\n        return validationResult.IsValid\n            ? Result&lt;ApiRequest&gt;.Success(request)\n            : Result&lt;ApiRequest&gt;.Failure(\n                Error.Create(\n                    ErrorCode.ValidationError,\n                    \"Invalid API request\",\n                    new Dictionary&lt;string, object&gt; { { \"Errors\", validationResult.Errors } }\n                )\n            );\n    }\n}\n</code></pre>"},{"location":"examples/real-world-scenarios/#5-file-processing-system","title":"5. File Processing System","text":""},{"location":"examples/real-world-scenarios/#file-upload-and-processing","title":"File Upload and Processing","text":"<pre><code>public class FileService\n{\n    public async Task&lt;Result&lt;ProcessedFile&gt;&gt; ProcessFileAsync(FileUpload request)\n    {\n        return await ResultPipeline&lt;ProcessedFile&gt;\n            .Start(request)\n            .Then(ValidateFile)\n            .ThenAsync(async validFile =&gt; await SaveFileAsync(validFile))\n            .ThenAsync(async saved =&gt; await ProcessFileContentAsync(saved))\n            .ThenAsync(async processed =&gt; await GenerateThumbnailAsync(processed))\n            .ThenAsync(async thumbnail =&gt; await UpdateDatabaseAsync(thumbnail))\n            .WithTimeout(TimeSpan.FromMinutes(5))\n            .WithRetry(3, TimeSpan.FromSeconds(10))\n            .BuildAsync();\n    }\n\n    private Result&lt;FileUpload&gt; ValidateFile(FileUpload request)\n    {\n        var validationResult = ValidationResult.Create()\n            .AddErrorIf(request.File == null, \"File\", \"No file was uploaded\")\n            .AddErrorIf(request.File.Length == 0, \"File\", \"Uploaded file is empty\")\n            .AddErrorIf(request.File.Length &gt; 10 * 1024 * 1024, \"File\", \"File size exceeds 10MB limit\")\n            .AddErrorIf(!IsValidFileType(request.File.ContentType), \"File\", \"Invalid file type\");\n\n        return validationResult.IsValid\n            ? Result&lt;FileUpload&gt;.Success(request)\n            : Result&lt;FileUpload&gt;.Failure(\n                Error.Create(\n                    ErrorCode.ValidationError,\n                    \"Invalid file upload\",\n                    new Dictionary&lt;string, object&gt; { { \"Errors\", validationResult.Errors } }\n                )\n            );\n    }\n}\n</code></pre>"},{"location":"examples/real-world-scenarios/#next-steps","title":"Next Steps","text":"<ul> <li>Basic Examples</li> <li>Advanced Examples</li> <li>API Reference </li> </ul>"},{"location":"features/async-support/","title":"Async Support","text":""},{"location":"features/async-support/#overview","title":"Overview","text":"<p>TinyResult provides comprehensive support for asynchronous operations through the <code>Result&lt;T&gt;</code> type. This allows you to work with asynchronous code in a clean and type-safe way, while maintaining the benefits of the Result Pattern.</p>"},{"location":"features/async-support/#basic-async-operations","title":"Basic Async Operations","text":""},{"location":"features/async-support/#1-creating-async-results","title":"1. Creating Async Results","text":"<pre><code>// Async success\npublic async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    var user = await _repository.GetByIdAsync(id);\n    return user != null\n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure(ErrorCode.NotFound, $\"User {id} not found\");\n}\n\n// Async failure\npublic async Task&lt;Result&lt;User&gt;&gt; CreateUserAsync(User user)\n{\n    try\n    {\n        var createdUser = await _repository.CreateAsync(user);\n        return Result&lt;User&gt;.Success(createdUser);\n    }\n    catch (Exception ex)\n    {\n        return Result&lt;User&gt;.Failure(\n            ErrorCode.DatabaseError,\n            \"Failed to create user\",\n            new Dictionary&lt;string, object&gt; { { \"Exception\", ex } }\n        );\n    }\n}\n</code></pre>"},{"location":"features/async-support/#2-handling-async-results","title":"2. Handling Async Results","text":"<pre><code>// Using async/await\npublic async Task&lt;IActionResult&gt; GetUser(int id)\n{\n    var result = await GetUserAsync(id);\n    return result.Match(\n        user =&gt; Ok(user),\n        error =&gt; StatusCode(GetStatusCode(error.Code), error.Message)\n    );\n}\n\n// Using ContinueWith\nGetUserAsync(1)\n    .ContinueWith(task =&gt;\n    {\n        var result = task.Result;\n        result.Match(\n            user =&gt; Console.WriteLine($\"User found: {user.Name}\"),\n            error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n        );\n    });\n</code></pre>"},{"location":"features/async-support/#advanced-async-features","title":"Advanced Async Features","text":""},{"location":"features/async-support/#1-async-pipeline","title":"1. Async Pipeline","text":"<pre><code>public async Task&lt;Result&lt;string&gt;&gt; ProcessUserAsync(int id)\n{\n    return await GetUserAsync(id)\n        .MapAsync(user =&gt; GetUserProfileAsync(user))\n        .MapAsync(profile =&gt; FormatProfileAsync(profile))\n        .OnSuccessAsync(formatted =&gt; Console.WriteLine($\"Formatted: {formatted}\"))\n        .OnFailureAsync(error =&gt; Console.WriteLine($\"Error: {error.Message}\"));\n}\n</code></pre>"},{"location":"features/async-support/#2-async-validation","title":"2. Async Validation","text":"<pre><code>public async Task&lt;Result&lt;User&gt;&gt; ValidateAndCreateUserAsync(User user)\n{\n    // Async validation\n    var validationResult = await ValidateUserAsync(user);\n    if (validationResult.IsFailure)\n    {\n        return Result&lt;User&gt;.Failure(validationResult);\n    }\n\n    // Async creation\n    return await CreateUserAsync(user);\n}\n\nprivate async Task&lt;ValidationResult&gt; ValidateUserAsync(User user)\n{\n    var result = ValidationResult.Create();\n\n    // Async name validation\n    if (await IsNameTakenAsync(user.Name))\n    {\n        result.AddError(\"Name\", \"Username is already taken\");\n    }\n\n    // Async email validation\n    if (await IsEmailValidAsync(user.Email))\n    {\n        result.AddError(\"Email\", \"Email is invalid\");\n    }\n\n    return result;\n}\n</code></pre>"},{"location":"features/async-support/#3-async-error-handling","title":"3. Async Error Handling","text":"<pre><code>public async Task&lt;Result&lt;User&gt;&gt; GetUserWithRetryAsync(int id)\n{\n    return await GetUserAsync(id)\n        .CatchAsync(async error =&gt;\n        {\n            if (error.Code == ErrorCode.NetworkError)\n            {\n                // Retry after delay\n                await Task.Delay(1000);\n                return await GetUserAsync(id);\n            }\n            return Result&lt;User&gt;.Failure(error);\n        });\n}\n</code></pre>"},{"location":"features/async-support/#best-practices","title":"Best Practices","text":""},{"location":"features/async-support/#1-use-async-all-the-way","title":"1. Use Async All the Way","text":"<pre><code>// Avoid\npublic async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    var user = _repository.GetById(id); // Synchronous call\n    return user != null\n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure(ErrorCode.NotFound);\n}\n\n// Prefer\npublic async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    var user = await _repository.GetByIdAsync(id);\n    return user != null\n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure(ErrorCode.NotFound);\n}\n</code></pre>"},{"location":"features/async-support/#2-handle-async-exceptions","title":"2. Handle Async Exceptions","text":"<pre><code>// Avoid\npublic async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    var user = await _repository.GetByIdAsync(id);\n    return Result&lt;User&gt;.Success(user);\n}\n\n// Prefer\npublic async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    try\n    {\n        var user = await _repository.GetByIdAsync(id);\n        return Result&lt;User&gt;.Success(user);\n    }\n    catch (Exception ex)\n    {\n        return Result&lt;User&gt;.Failure(\n            ErrorCode.Unknown,\n            \"An error occurred while getting user\",\n            new Dictionary&lt;string, object&gt; { { \"Exception\", ex } }\n        );\n    }\n}\n</code></pre>"},{"location":"features/async-support/#3-use-configureawait","title":"3. Use ConfigureAwait","text":"<pre><code>public async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    try\n    {\n        var user = await _repository.GetByIdAsync(id).ConfigureAwait(false);\n        return Result&lt;User&gt;.Success(user);\n    }\n    catch (Exception ex)\n    {\n        return Result&lt;User&gt;.Failure(\n            ErrorCode.Unknown,\n            \"An error occurred while getting user\",\n            new Dictionary&lt;string, object&gt; { { \"Exception\", ex } }\n        );\n    }\n}\n</code></pre>"},{"location":"features/async-support/#common-use-cases","title":"Common Use Cases","text":""},{"location":"features/async-support/#1-api-controllers","title":"1. API Controllers","text":"<pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class UsersController : ControllerBase\n{\n    private readonly IUserService _userService;\n\n    public UsersController(IUserService userService)\n    {\n        _userService = userService;\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task&lt;IActionResult&gt; GetUser(int id)\n    {\n        var result = await _userService.GetUserAsync(id);\n        return result.Match(\n            user =&gt; Ok(user),\n            error =&gt; StatusCode(GetStatusCode(error.Code), error.Message)\n        );\n    }\n\n    [HttpPost]\n    public async Task&lt;IActionResult&gt; CreateUser([FromBody] User user)\n    {\n        var result = await _userService.CreateUserAsync(user);\n        return result.Match(\n            createdUser =&gt; CreatedAtAction(nameof(GetUser), new { id = createdUser.Id }, createdUser),\n            error =&gt; StatusCode(GetStatusCode(error.Code), error.Message)\n        );\n    }\n}\n</code></pre>"},{"location":"features/async-support/#2-database-operations","title":"2. Database Operations","text":"<pre><code>public class UserRepository\n{\n    private readonly DbContext _context;\n\n    public UserRepository(DbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n    {\n        try\n        {\n            var user = await _context.Users.FindAsync(id);\n            return user != null\n                ? Result&lt;User&gt;.Success(user)\n                : Result&lt;User&gt;.Failure(ErrorCode.NotFound, $\"User {id} not found\");\n        }\n        catch (Exception ex)\n        {\n            return Result&lt;User&gt;.Failure(\n                ErrorCode.DatabaseError,\n                \"Failed to get user\",\n                new Dictionary&lt;string, object&gt; { { \"Exception\", ex } }\n            );\n        }\n    }\n\n    public async Task&lt;Result&lt;User&gt;&gt; CreateUserAsync(User user)\n    {\n        try\n        {\n            await _context.Users.AddAsync(user);\n            await _context.SaveChangesAsync();\n            return Result&lt;User&gt;.Success(user);\n        }\n        catch (Exception ex)\n        {\n            return Result&lt;User&gt;.Failure(\n                ErrorCode.DatabaseError,\n                \"Failed to create user\",\n                new Dictionary&lt;string, object&gt; { { \"Exception\", ex } }\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"features/async-support/#3-external-service-calls","title":"3. External Service Calls","text":"<pre><code>public class ExternalService\n{\n    private readonly HttpClient _httpClient;\n\n    public ExternalService(HttpClient httpClient)\n    {\n        _httpClient = httpClient;\n    }\n\n    public async Task&lt;Result&lt;WeatherData&gt;&gt; GetWeatherAsync(string city)\n    {\n        try\n        {\n            var response = await _httpClient.GetAsync($\"weather/{city}\");\n            if (!response.IsSuccessStatusCode)\n            {\n                return Result&lt;WeatherData&gt;.Failure(\n                    ErrorCode.NetworkError,\n                    $\"Failed to get weather data: {response.StatusCode}\"\n                );\n            }\n\n            var content = await response.Content.ReadAsStringAsync();\n            var weatherData = JsonSerializer.Deserialize&lt;WeatherData&gt;(content);\n            return Result&lt;WeatherData&gt;.Success(weatherData);\n        }\n        catch (Exception ex)\n        {\n            return Result&lt;WeatherData&gt;.Failure(\n                ErrorCode.Unknown,\n                \"Failed to get weather data\",\n                new Dictionary&lt;string, object&gt; { { \"Exception\", ex } }\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"features/async-support/#next-steps","title":"Next Steps","text":"<ul> <li>LINQ Support</li> <li>Extensions</li> <li>Examples </li> </ul>"},{"location":"features/error-handling/","title":"Error Handling","text":""},{"location":"features/error-handling/#overview","title":"Overview","text":"<p>TinyResult provides a clean and type-safe way to handle errors in your applications. The error handling features offer a comprehensive solution for catching, processing, and reporting errors.</p>"},{"location":"features/error-handling/#key-concepts","title":"Key Concepts","text":""},{"location":"features/error-handling/#1-error-types","title":"1. Error Types","text":"<pre><code>// Simple error\nvar error = Error.Create(\"Something went wrong\");\n\n// Error with code\nvar error = Error.Create(ErrorCode.NotFound, \"User not found\");\n\n// Error with metadata\nvar error = Error.Create(\n    ErrorCode.ValidationError,\n    \"Invalid input\",\n    new Dictionary&lt;string, object&gt;\n    {\n        { \"Field\", \"Name\" },\n        { \"Value\", \"\" }\n    }\n);\n</code></pre>"},{"location":"features/error-handling/#2-error-codes","title":"2. Error Codes","text":"<p>Predefined error codes:</p> <pre><code>public enum ErrorCode\n{\n    Unknown,           // Unknown error\n    NotFound,          // Resource not found\n    ValidationError,   // Validation error\n    Unauthorized,      // Unauthorized access\n    InvalidOperation,  // Invalid operation\n    NetworkError,      // Network error\n    Timeout,           // Timeout\n    ConfigurationError,// Configuration error\n    DatabaseError      // Database error\n}\n</code></pre>"},{"location":"features/error-handling/#error-handling-strategies","title":"Error Handling Strategies","text":""},{"location":"features/error-handling/#1-basic-error-handling","title":"1. Basic Error Handling","text":"<pre><code>var result = GetUser(1);\n\n// Error handling with Match\nresult.Match(\n    user =&gt; Console.WriteLine($\"User found: {user.Name}\"),\n    error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n);\n\n// Error handling with OnFailure\nresult.OnFailure(error =&gt; Console.WriteLine($\"Error: {error.Message}\"));\n</code></pre>"},{"location":"features/error-handling/#2-error-code-based-handling","title":"2. Error Code Based Handling","text":"<pre><code>var result = GetUser(1);\n\nif (result.IsFailure)\n{\n    switch (result.Error.Code)\n    {\n        case ErrorCode.NotFound:\n            Console.WriteLine(\"User not found\");\n            break;\n        case ErrorCode.ValidationError:\n            Console.WriteLine(\"Validation error\");\n            break;\n        default:\n            Console.WriteLine(\"Unknown error\");\n            break;\n    }\n}\n</code></pre>"},{"location":"features/error-handling/#3-error-transformation","title":"3. Error Transformation","text":"<pre><code>var result = GetUser(1)\n    .TransformError(error =&gt; new Error(\n        ErrorCode.Unknown,\n        $\"Unexpected error: {error.Message}\"\n    ));\n</code></pre>"},{"location":"features/error-handling/#advanced-features","title":"Advanced Features","text":""},{"location":"features/error-handling/#1-error-aggregation","title":"1. Error Aggregation","text":"<pre><code>var results = new[]\n{\n    GetUser(1),\n    GetUser(2),\n    GetUser(3)\n};\n\nvar combinedResult = Result.Combine(results);\n\nif (combinedResult.IsFailure)\n{\n    foreach (var error in combinedResult.Error.Metadata[\"Errors\"] as IEnumerable&lt;Error&gt;)\n    {\n        Console.WriteLine($\"Error: {error.Message}\");\n    }\n}\n</code></pre>"},{"location":"features/error-handling/#2-error-logging","title":"2. Error Logging","text":"<pre><code>// Error logging configuration\nResult.OnError = error =&gt;\n{\n    Console.WriteLine($\"Error Code: {error.Code}\");\n    Console.WriteLine($\"Error Message: {error.Message}\");\n    foreach (var metadata in error.Metadata)\n    {\n        Console.WriteLine($\"{metadata.Key}: {metadata.Value}\");\n    }\n};\n</code></pre>"},{"location":"features/error-handling/#3-custom-error-handlers","title":"3. Custom Error Handlers","text":"<pre><code>public class CustomErrorHandler\n{\n    public static Result&lt;T&gt; HandleError&lt;T&gt;(Error error)\n    {\n        switch (error.Code)\n        {\n            case ErrorCode.NotFound:\n                return Result&lt;T&gt;.Failure(\"Resource not found. Please try again.\");\n            case ErrorCode.ValidationError:\n                return Result&lt;T&gt;.Failure(\"Invalid data.\");\n            default:\n                return Result&lt;T&gt;.Failure(\"An unexpected error occurred.\");\n        }\n    }\n}\n\nvar result = GetUser(1)\n    .Catch(CustomErrorHandler.HandleError);\n</code></pre>"},{"location":"features/error-handling/#best-practices","title":"Best Practices","text":""},{"location":"features/error-handling/#1-descriptive-error-messages","title":"1. Descriptive Error Messages","text":"<pre><code>// Avoid\nreturn Result&lt;User&gt;.Failure(\"Error\");\n\n// Prefer\nreturn Result&lt;User&gt;.Failure(\n    ErrorCode.ValidationError,\n    \"User name must be between 3 and 50 characters\",\n    new Dictionary&lt;string, object&gt;\n    {\n        { \"Field\", \"Name\" },\n        { \"MinLength\", 3 },\n        { \"MaxLength\", 50 }\n    }\n);\n</code></pre>"},{"location":"features/error-handling/#2-error-chaining","title":"2. Error Chaining","text":"<pre><code>var result = GetUser(1)\n    .Catch(error =&gt; CustomErrorHandler.HandleError(error))\n    .Catch(error =&gt; FallbackErrorHandler.HandleError(error));\n</code></pre>"},{"location":"features/error-handling/#3-error-tracking","title":"3. Error Tracking","text":"<pre><code>public static Result&lt;T&gt; WithErrorTracking&lt;T&gt;(Func&lt;Result&lt;T&gt;&gt; operation)\n{\n    try\n    {\n        return operation();\n    }\n    catch (Exception ex)\n    {\n        return Result&lt;T&gt;.Failure(\n            ErrorCode.Unknown,\n            \"An unexpected error occurred\",\n            new Dictionary&lt;string, object&gt;\n            {\n                { \"Exception\", ex },\n                { \"StackTrace\", ex.StackTrace }\n            }\n        );\n    }\n}\n</code></pre>"},{"location":"features/error-handling/#common-use-cases","title":"Common Use Cases","text":""},{"location":"features/error-handling/#1-api-responses","title":"1. API Responses","text":"<pre><code>public async Task&lt;IActionResult&gt; GetUser(int id)\n{\n    var result = await _userService.GetUser(id);\n    return result.Match(\n        user =&gt; Ok(user),\n        error =&gt; StatusCode(GetStatusCode(error.Code), error.Message)\n    );\n}\n</code></pre>"},{"location":"features/error-handling/#2-database-operations","title":"2. Database Operations","text":"<pre><code>public async Task&lt;Result&lt;User&gt;&gt; CreateUser(User user)\n{\n    try\n    {\n        var createdUser = await _repository.CreateAsync(user);\n        return Result&lt;User&gt;.Success(createdUser);\n    }\n    catch (Exception ex)\n    {\n        return Result&lt;User&gt;.Failure(\n            ErrorCode.DatabaseError,\n            \"Failed to create user\",\n            new Dictionary&lt;string, object&gt; { { \"Exception\", ex } }\n        );\n    }\n}\n</code></pre>"},{"location":"features/error-handling/#3-validation","title":"3. Validation","text":"<pre><code>public Result&lt;User&gt; ValidateUser(User user)\n{\n    var validationResult = ValidationResult.Create();\n\n    if (string.IsNullOrEmpty(user.Name))\n    {\n        validationResult.AddError(\"Name\", \"Name is required\");\n    }\n\n    if (user.Age &lt; 18)\n    {\n        validationResult.AddError(\"Age\", \"User must be at least 18 years old\");\n    }\n\n    return validationResult.IsValid\n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure(validationResult);\n}\n</code></pre>"},{"location":"features/error-handling/#next-steps","title":"Next Steps","text":"<ul> <li>Validation</li> <li>Async Support</li> <li>Examples </li> </ul>"},{"location":"features/extensions/","title":"Extensions","text":""},{"location":"features/extensions/#overview","title":"Overview","text":"<p>TinyResult provides a rich set of extension methods that enhance the functionality of the Result Pattern. These extensions make it easier to work with results in various scenarios and provide additional utility methods for common operations.</p>"},{"location":"features/extensions/#basic-extensions","title":"Basic Extensions","text":""},{"location":"features/extensions/#1-value-access","title":"1. Value Access","text":"<pre><code>// Get value or default\nvar value = result.GetValueOr(defaultValue);\n\n// Get value or throw\nvar value = result.GetValueOrThrow();\n\n// Get value or handle error\nvar value = result.GetValueOr(error =&gt; HandleError(error));\n</code></pre>"},{"location":"features/extensions/#2-error-handling","title":"2. Error Handling","text":"<pre><code>// Transform error\nvar transformedResult = result.TransformError(error =&gt; \n    new Error(error.Code, $\"Modified: {error.Message}\")\n);\n\n// Recover from error\nvar recoveredResult = result.Recover(error =&gt; \n    Result&lt;T&gt;.Success(fallbackValue)\n);\n\n// Handle specific error\nvar handledResult = result.Catch(\n    error =&gt; error.Code == ErrorCode.NotFound,\n    error =&gt; Result&lt;T&gt;.Success(fallbackValue)\n);\n</code></pre>"},{"location":"features/extensions/#3-validation","title":"3. Validation","text":"<pre><code>// Validate with predicate\nvar validatedResult = result.Validate(\n    value =&gt; value != null,\n    \"Value cannot be null\"\n);\n\n// Validate with multiple rules\nvar validatedResult = result.Validate(\n    value =&gt; new[]\n    {\n        (value != null, \"Value cannot be null\"),\n        (value.Length &gt; 0, \"Value cannot be empty\")\n    }\n);\n</code></pre>"},{"location":"features/extensions/#advanced-extensions","title":"Advanced Extensions","text":""},{"location":"features/extensions/#1-pipeline-operations","title":"1. Pipeline Operations","text":"<pre><code>// Chain operations\nvar finalResult = result\n    .Then(value =&gt; ProcessValue(value))\n    .Then(processed =&gt; TransformValue(processed))\n    .Then(transformed =&gt; SaveValue(transformed));\n\n// Conditional operations\nvar conditionalResult = result\n    .When(\n        value =&gt; value.IsValid,\n        value =&gt; ProcessValidValue(value),\n        value =&gt; HandleInvalidValue(value)\n    );\n</code></pre>"},{"location":"features/extensions/#2-async-operations","title":"2. Async Operations","text":"<pre><code>// Async value access\nvar value = await result.GetValueOrAsync(async () =&gt; \n    await GetFallbackValueAsync()\n);\n\n// Async error handling\nvar handledResult = await result.CatchAsync(async error =&gt; \n    await HandleErrorAsync(error)\n);\n\n// Async validation\nvar validatedResult = await result.ValidateAsync(async value =&gt; \n    await IsValidAsync(value)\n);\n</code></pre>"},{"location":"features/extensions/#3-collection-operations","title":"3. Collection Operations","text":"<pre><code>// Combine results\nvar combinedResult = results.Combine();\n\n// Partition results\nvar (successes, failures) = results.Partition();\n\n// Aggregate results\nvar aggregatedResult = results.Aggregate(\n    (acc, result) =&gt; acc.Bind(value =&gt; \n        result.Map(newValue =&gt; CombineValues(value, newValue))\n    )\n);\n</code></pre>"},{"location":"features/extensions/#best-practices","title":"Best Practices","text":""},{"location":"features/extensions/#1-use-appropriate-extensions","title":"1. Use Appropriate Extensions","text":"<pre><code>// Avoid\nif (result.IsSuccess)\n{\n    var value = result.Value;\n    // Process value\n}\nelse\n{\n    // Handle error\n}\n\n// Prefer\nresult.Match(\n    value =&gt; ProcessValue(value),\n    error =&gt; HandleError(error)\n);\n</code></pre>"},{"location":"features/extensions/#2-chain-operations-effectively","title":"2. Chain Operations Effectively","text":"<pre><code>// Avoid\nvar result1 = ProcessValue(value);\nif (result1.IsSuccess)\n{\n    var result2 = TransformValue(result1.Value);\n    if (result2.IsSuccess)\n    {\n        return SaveValue(result2.Value);\n    }\n    return result2;\n}\nreturn result1;\n\n// Prefer\nreturn ProcessValue(value)\n    .Bind(processed =&gt; TransformValue(processed))\n    .Bind(transformed =&gt; SaveValue(transformed));\n</code></pre>"},{"location":"features/extensions/#3-handle-errors-gracefully","title":"3. Handle Errors Gracefully","text":"<pre><code>// Avoid\ntry\n{\n    var value = result.GetValueOrThrow();\n    // Process value\n}\ncatch (Exception ex)\n{\n    // Handle exception\n}\n\n// Prefer\nresult.Match(\n    value =&gt; ProcessValue(value),\n    error =&gt; HandleError(error)\n);\n</code></pre>"},{"location":"features/extensions/#common-use-cases","title":"Common Use Cases","text":""},{"location":"features/extensions/#1-api-controllers","title":"1. API Controllers","text":"<pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class UsersController : ControllerBase\n{\n    [HttpGet(\"{id}\")]\n    public async Task&lt;IActionResult&gt; GetUser(int id)\n    {\n        return await _userService.GetUserAsync(id)\n            .Match(\n                user =&gt; Ok(user),\n                error =&gt; StatusCode(GetStatusCode(error.Code), error.Message)\n            );\n    }\n}\n</code></pre>"},{"location":"features/extensions/#2-service-layer","title":"2. Service Layer","text":"<pre><code>public class UserService\n{\n    public async Task&lt;Result&lt;User&gt;&gt; UpdateUserAsync(int id, UserUpdate update)\n    {\n        return await GetUserAsync(id)\n            .Validate(user =&gt; user.IsActive, \"User is not active\")\n            .Bind(user =&gt; ValidateUpdateAsync(update))\n            .Bind(validUpdate =&gt; ApplyUpdateAsync(id, validUpdate))\n            .Catch(error =&gt; error.Code == ErrorCode.NotFound,\n                error =&gt; CreateUserAsync(update));\n    }\n}\n</code></pre>"},{"location":"features/extensions/#3-data-access","title":"3. Data Access","text":"<pre><code>public class UserRepository\n{\n    public async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n    {\n        return await _context.Users\n            .FindAsync(id)\n            .ToResult()\n            .Validate(user =&gt; user != null, $\"User {id} not found\")\n            .Catch(error =&gt; error.Code == ErrorCode.NotFound,\n                error =&gt; GetUserFromCacheAsync(id));\n    }\n}\n</code></pre>"},{"location":"features/extensions/#next-steps","title":"Next Steps","text":"<ul> <li>Examples</li> <li>API Reference</li> <li>Advanced Topics </li> </ul>"},{"location":"features/linq-support/","title":"LINQ Support","text":""},{"location":"features/linq-support/#overview","title":"Overview","text":"<p>TinyResult provides comprehensive LINQ support, allowing you to work with collections of results in a functional and expressive way. This support enables you to perform complex operations on result collections while maintaining type safety and error handling.</p>"},{"location":"features/linq-support/#basic-linq-operations","title":"Basic LINQ Operations","text":""},{"location":"features/linq-support/#1-filtering-results","title":"1. Filtering Results","text":"<pre><code>// Filter successful results\nvar successfulResults = results.Where(r =&gt; r.IsSuccess);\n\n// Filter failed results\nvar failedResults = results.Where(r =&gt; r.IsFailure);\n\n// Filter by error code\nvar notFoundResults = results.Where(r =&gt; r.Error.Code == ErrorCode.NotFound);\n</code></pre>"},{"location":"features/linq-support/#2-transforming-results","title":"2. Transforming Results","text":"<pre><code>// Map successful results\nvar userNames = results\n    .Where(r =&gt; r.IsSuccess)\n    .Select(r =&gt; r.Value.Name);\n\n// Map with error handling\nvar processedResults = results\n    .Select(r =&gt; r.Map(user =&gt; ProcessUser(user)))\n    .Where(r =&gt; r.IsSuccess);\n</code></pre>"},{"location":"features/linq-support/#3-aggregating-results","title":"3. Aggregating Results","text":"<pre><code>// Combine multiple results\nvar combinedResult = results.Aggregate(\n    Result&lt;List&lt;User&gt;&gt;.Success(new List&lt;User&gt;()),\n    (acc, result) =&gt; acc.Bind(users =&gt; \n        result.Map(user =&gt; {\n            users.Add(user);\n            return users;\n        })\n    )\n);\n\n// Count successful results\nvar successCount = results.Count(r =&gt; r.IsSuccess);\n</code></pre>"},{"location":"features/linq-support/#advanced-linq-features","title":"Advanced LINQ Features","text":""},{"location":"features/linq-support/#1-result-sequences","title":"1. Result Sequences","text":"<pre><code>public Result&lt;IEnumerable&lt;User&gt;&gt; GetUsersByDepartment(int departmentId)\n{\n    return GetDepartmentUsers(departmentId)\n        .Bind(users =&gt; ValidateUsers(users))\n        .Map(validUsers =&gt; validUsers.OrderBy(u =&gt; u.Name));\n}\n\nprivate Result&lt;IEnumerable&lt;User&gt;&gt; ValidateUsers(IEnumerable&lt;User&gt; users)\n{\n    var validationResults = users\n        .Select(user =&gt; ValidateUser(user))\n        .ToList();\n\n    if (validationResults.All(r =&gt; r.IsSuccess))\n    {\n        return Result&lt;IEnumerable&lt;User&gt;&gt;.Success(users);\n    }\n\n    var errors = validationResults\n        .Where(r =&gt; r.IsFailure)\n        .Select(r =&gt; r.Error)\n        .ToList();\n\n    return Result&lt;IEnumerable&lt;User&gt;&gt;.Failure(\n        ErrorCode.ValidationError,\n        \"One or more users failed validation\",\n        new Dictionary&lt;string, object&gt; { { \"Errors\", errors } }\n    );\n}\n</code></pre>"},{"location":"features/linq-support/#2-parallel-processing","title":"2. Parallel Processing","text":"<pre><code>public async Task&lt;Result&lt;IEnumerable&lt;User&gt;&gt;&gt; ProcessUsersInParallel(IEnumerable&lt;int&gt; userIds)\n{\n    var tasks = userIds.Select(id =&gt; GetUserAsync(id));\n    var results = await Task.WhenAll(tasks);\n\n    if (results.All(r =&gt; r.IsSuccess))\n    {\n        return Result&lt;IEnumerable&lt;User&gt;&gt;.Success(\n            results.Select(r =&gt; r.Value)\n        );\n    }\n\n    var errors = results\n        .Where(r =&gt; r.IsFailure)\n        .Select(r =&gt; r.Error)\n        .ToList();\n\n    return Result&lt;IEnumerable&lt;User&gt;&gt;.Failure(\n        ErrorCode.ProcessingError,\n        \"One or more users failed to process\",\n        new Dictionary&lt;string, object&gt; { { \"Errors\", errors } }\n    );\n}\n</code></pre>"},{"location":"features/linq-support/#3-result-chaining","title":"3. Result Chaining","text":"<pre><code>public Result&lt;Order&gt; ProcessOrder(OrderRequest request)\n{\n    return ValidateOrder(request)\n        .Bind(validRequest =&gt; GetCustomer(validRequest.CustomerId))\n        .Bind(customer =&gt; CheckInventory(request.Items))\n        .Bind(inventory =&gt; CalculateTotal(request.Items))\n        .Bind(total =&gt; CreateOrder(request, total));\n}\n</code></pre>"},{"location":"features/linq-support/#best-practices","title":"Best Practices","text":""},{"location":"features/linq-support/#1-use-appropriate-linq-methods","title":"1. Use Appropriate LINQ Methods","text":"<pre><code>// Avoid\nvar users = results\n    .Where(r =&gt; r.IsSuccess)\n    .Select(r =&gt; r.Value)\n    .ToList();\n\n// Prefer\nvar users = results\n    .SelectMany(r =&gt; r.Match(\n        user =&gt; new[] { user },\n        error =&gt; Enumerable.Empty&lt;User&gt;()\n    ))\n    .ToList();\n</code></pre>"},{"location":"features/linq-support/#2-handle-errors-appropriately","title":"2. Handle Errors Appropriately","text":"<pre><code>// Avoid\nvar processedResults = results\n    .Select(r =&gt; r.Map(ProcessUser))\n    .ToList();\n\n// Prefer\nvar processedResults = results\n    .Select(r =&gt; r.Map(ProcessUser))\n    .Where(r =&gt; r.IsSuccess)\n    .Select(r =&gt; r.Value)\n    .ToList();\n</code></pre>"},{"location":"features/linq-support/#3-use-result-aggregation","title":"3. Use Result Aggregation","text":"<pre><code>// Avoid\nvar allSuccess = results.All(r =&gt; r.IsSuccess);\nif (allSuccess)\n{\n    var values = results.Select(r =&gt; r.Value).ToList();\n}\n\n// Prefer\nvar combinedResult = results.Aggregate(\n    Result&lt;List&lt;User&gt;&gt;.Success(new List&lt;User&gt;()),\n    (acc, result) =&gt; acc.Bind(users =&gt; \n        result.Map(user =&gt; {\n            users.Add(user);\n            return users;\n        })\n    )\n);\n</code></pre>"},{"location":"features/linq-support/#common-use-cases","title":"Common Use Cases","text":""},{"location":"features/linq-support/#1-batch-processing","title":"1. Batch Processing","text":"<pre><code>public Result&lt;IEnumerable&lt;ProcessedItem&gt;&gt; ProcessBatch(IEnumerable&lt;Item&gt; items)\n{\n    return items\n        .Select(item =&gt; ValidateItem(item))\n        .Aggregate(\n            Result&lt;List&lt;ProcessedItem&gt;&gt;.Success(new List&lt;ProcessedItem&gt;()),\n            (acc, result) =&gt; acc.Bind(processedItems =&gt; \n                result.Map(processedItem =&gt; {\n                    processedItems.Add(processedItem);\n                    return processedItems;\n                })\n            )\n        );\n}\n</code></pre>"},{"location":"features/linq-support/#2-data-validation","title":"2. Data Validation","text":"<pre><code>public Result&lt;IEnumerable&lt;ValidatedData&gt;&gt; ValidateDataSet(IEnumerable&lt;Data&gt; dataSet)\n{\n    var validationResults = dataSet\n        .Select(data =&gt; ValidateData(data))\n        .ToList();\n\n    if (validationResults.All(r =&gt; r.IsSuccess))\n    {\n        return Result&lt;IEnumerable&lt;ValidatedData&gt;&gt;.Success(\n            validationResults.Select(r =&gt; r.Value)\n        );\n    }\n\n    var errors = validationResults\n        .Where(r =&gt; r.IsFailure)\n        .Select(r =&gt; r.Error)\n        .ToList();\n\n    return Result&lt;IEnumerable&lt;ValidatedData&gt;&gt;.Failure(\n        ErrorCode.ValidationError,\n        \"One or more data items failed validation\",\n        new Dictionary&lt;string, object&gt; { { \"Errors\", errors } }\n    );\n}\n</code></pre>"},{"location":"features/linq-support/#3-api-response-handling","title":"3. API Response Handling","text":"<pre><code>public async Task&lt;IActionResult&gt; ProcessBatchRequest(BatchRequest request)\n{\n    var results = await Task.WhenAll(\n        request.Items.Select(item =&gt; ProcessItemAsync(item))\n    );\n\n    if (results.All(r =&gt; r.IsSuccess))\n    {\n        return Ok(results.Select(r =&gt; r.Value));\n    }\n\n    var errors = results\n        .Where(r =&gt; r.IsFailure)\n        .Select(r =&gt; r.Error)\n        .ToList();\n\n    return BadRequest(new\n    {\n        Message = \"One or more items failed to process\",\n        Errors = errors\n    });\n}\n</code></pre>"},{"location":"features/linq-support/#next-steps","title":"Next Steps","text":"<ul> <li>Extensions</li> <li>Examples</li> <li>API Reference </li> </ul>"},{"location":"features/pipeline/","title":"Pipeline","text":"<p>Pipeline provides a fluent way to chain operations and handle results in a sequential manner.</p>"},{"location":"features/pipeline/#basic-usage","title":"Basic Usage","text":"<pre><code>// Create a pipeline\nvar pipeline = ResultPipeline.Start(new { Id = 1 });\n\n// Chain operations\nvar result = pipeline\n    .Map(x =&gt; x.Id)\n    .Validate(x =&gt; x &gt; 0, ErrorCode.InvalidInput, \"Id must be positive\")\n    .Bind(x =&gt; Result&lt;int&gt;.Success(x * 2))\n    .OnSuccess(x =&gt; Console.WriteLine($\"Result: {x}\"))\n    .OnFailure(error =&gt; Console.WriteLine($\"Error: {error}\"))\n    .Catch(ex =&gt; Result&lt;int&gt;.Failure(ErrorCode.InternalError, ex.Message))\n    .Result;\n</code></pre>"},{"location":"features/pipeline/#advanced-usage","title":"Advanced Usage","text":""},{"location":"features/pipeline/#custom-pipeline","title":"Custom Pipeline","text":"<pre><code>// Implement IPipeline\npublic class CustomPipeline&lt;T&gt; : IPipeline&lt;T&gt;\n{\n    public IPipeline&lt;T&gt; Map&lt;TResult&gt;(Func&lt;T, TResult&gt; mapper)\n    {\n        // Custom implementation\n    }\n\n    public IPipeline&lt;T&gt; Bind&lt;TResult&gt;(Func&lt;T, Result&lt;TResult&gt;&gt; binder)\n    {\n        // Custom implementation\n    }\n\n    public IPipeline&lt;T&gt; Validate(Func&lt;T, bool&gt; predicate, ErrorCode code, string message)\n    {\n        // Custom implementation\n    }\n\n    public IPipeline&lt;T&gt; OnSuccess(Action&lt;T&gt; action)\n    {\n        // Custom implementation\n    }\n\n    public IPipeline&lt;T&gt; OnFailure(Action&lt;Error&gt; action)\n    {\n        // Custom implementation\n    }\n\n    public IPipeline&lt;T&gt; Catch(Func&lt;Exception, Result&lt;T&gt;&gt; handler)\n    {\n        // Custom implementation\n    }\n\n    public Result&lt;T&gt; Result { get; }\n}\n\n// Use custom pipeline\nvar customPipeline = new CustomPipeline&lt;int&gt;();\nvar result = customPipeline\n    .Map(x =&gt; x * 2)\n    .Result;\n</code></pre>"},{"location":"features/pipeline/#pipeline-events","title":"Pipeline Events","text":"<pre><code>// Subscribe to pipeline events\npipeline.OnSuccess += (value) =&gt; \n    Console.WriteLine($\"Pipeline success: {value}\");\npipeline.OnFailure += (error) =&gt; \n    Console.WriteLine($\"Pipeline failure: {error}\");\npipeline.OnException += (exception) =&gt; \n    Console.WriteLine($\"Pipeline exception: {exception.Message}\");\n</code></pre>"},{"location":"features/pipeline/#best-practices","title":"Best Practices","text":"<ol> <li>Keep pipelines short and focused</li> <li>Use meaningful operation names</li> <li>Handle errors appropriately</li> <li>Implement proper logging</li> <li>Use async operations when needed</li> <li>Consider performance implications</li> <li>Test pipeline behavior</li> <li>Document pipeline flow </li> </ol>"},{"location":"features/result-pattern/","title":"Result Pattern","text":""},{"location":"features/result-pattern/#overview","title":"Overview","text":"<p>The Result Pattern is a functional programming concept that provides a clean and type-safe way to handle success and failure cases in your applications. TinyResult implements this pattern in a way that is both powerful and easy to use.</p>"},{"location":"features/result-pattern/#key-concepts","title":"Key Concepts","text":""},{"location":"features/result-pattern/#1-result-type","title":"1. Result Type","text":"<p>The <code>Result&lt;T&gt;</code> type represents the outcome of an operation that can either succeed or fail:</p> <pre><code>public class Result&lt;T&gt;\n{\n    public bool IsSuccess { get; }\n    public bool IsFailure =&gt; !IsSuccess;\n    public T Value { get; }\n    public Error Error { get; }\n}\n</code></pre>"},{"location":"features/result-pattern/#2-error-type","title":"2. Error Type","text":"<p>The <code>Error</code> type represents detailed information about a failure:</p> <pre><code>public class Error\n{\n    public ErrorCode Code { get; }\n    public string Message { get; }\n    public IReadOnlyDictionary&lt;string, object&gt; Metadata { get; }\n}\n</code></pre>"},{"location":"features/result-pattern/#3-error-codes","title":"3. Error Codes","text":"<p>Predefined error codes for common failure scenarios:</p> <pre><code>public enum ErrorCode\n{\n    Unknown,\n    NotFound,\n    ValidationError,\n    Unauthorized,\n    InvalidOperation,\n    NetworkError,\n    Timeout,\n    ConfigurationError,\n    DatabaseError\n}\n</code></pre>"},{"location":"features/result-pattern/#core-operations","title":"Core Operations","text":""},{"location":"features/result-pattern/#1-creating-results","title":"1. Creating Results","text":"<pre><code>// Success\nvar success = Result&lt;int&gt;.Success(42);\n\n// Failure with message\nvar failure = Result&lt;int&gt;.Failure(\"Something went wrong\");\n\n// Failure with error code\nvar failure = Result&lt;int&gt;.Failure(ErrorCode.NotFound, \"User not found\");\n\n// Failure with custom error\nvar failure = Result&lt;int&gt;.Failure(new Error(ErrorCode.ValidationError, \"Invalid input\"));\n</code></pre>"},{"location":"features/result-pattern/#2-transforming-results","title":"2. Transforming Results","text":"<pre><code>// Map: Transform success value\nvar result = success.Map(x =&gt; x * 2);\n\n// Bind: Chain operations that return results\nvar result = success.Bind(x =&gt; GetUser(x));\n\n// Filter: Validate success value\nvar result = success.Filter(x =&gt; x &gt; 0, \"Value must be positive\");\n</code></pre>"},{"location":"features/result-pattern/#3-handling-results","title":"3. Handling Results","text":"<pre><code>// Match: Handle both success and failure\nresult.Match(\n    value =&gt; Console.WriteLine($\"Success: {value}\"),\n    error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n);\n\n// OnSuccess: Handle success only\nresult.OnSuccess(value =&gt; Console.WriteLine($\"Success: {value}\"));\n\n// OnFailure: Handle failure only\nresult.OnFailure(error =&gt; Console.WriteLine($\"Error: {error.Message}\"));\n</code></pre>"},{"location":"features/result-pattern/#advanced-features","title":"Advanced Features","text":""},{"location":"features/result-pattern/#1-result-pipelines","title":"1. Result Pipelines","text":"<p>Chain multiple operations together:</p> <pre><code>var result = GetUser(1)\n    .Map(user =&gt; user.Name)\n    .Map(name =&gt; name.ToUpper())\n    .Filter(name =&gt; name.Length &gt; 0, \"Name cannot be empty\")\n    .OnSuccess(name =&gt; Console.WriteLine($\"Name: {name}\"))\n    .OnFailure(error =&gt; Console.WriteLine($\"Error: {error.Message}\"));\n</code></pre>"},{"location":"features/result-pattern/#2-error-handling","title":"2. Error Handling","text":"<p>Handle errors in a type-safe way:</p> <pre><code>var result = GetUser(1);\n\nif (result.IsFailure)\n{\n    switch (result.Error.Code)\n    {\n        case ErrorCode.NotFound:\n            return Result&lt;User&gt;.Failure(\"User not found. Please try again.\");\n        case ErrorCode.ValidationError:\n            return Result&lt;User&gt;.Failure(\"Invalid user data.\");\n        default:\n            return Result&lt;User&gt;.Failure(\"An unexpected error occurred.\");\n    }\n}\n</code></pre>"},{"location":"features/result-pattern/#3-result-aggregation","title":"3. Result Aggregation","text":"<p>Combine multiple results:</p> <pre><code>var results = new[]\n{\n    GetUser(1),\n    GetUser(2),\n    GetUser(3)\n};\n\nvar combinedResult = Result.Combine(results);\n\ncombinedResult.Match(\n    users =&gt; Console.WriteLine($\"Found {users.Count()} users\"),\n    error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n);\n</code></pre>"},{"location":"features/result-pattern/#best-practices","title":"Best Practices","text":""},{"location":"features/result-pattern/#1-use-results-instead-of-exceptions","title":"1. Use Results Instead of Exceptions","text":"<pre><code>// Avoid\npublic User GetUser(int id)\n{\n    var user = _repository.GetById(id);\n    if (user == null)\n    {\n        throw new UserNotFoundException($\"User {id} not found\");\n    }\n    return user;\n}\n\n// Prefer\npublic Result&lt;User&gt; GetUser(int id)\n{\n    var user = _repository.GetById(id);\n    return user != null\n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure(ErrorCode.NotFound, $\"User {id} not found\");\n}\n</code></pre>"},{"location":"features/result-pattern/#2-chain-operations","title":"2. Chain Operations","text":"<pre><code>// Avoid\nvar user = GetUser(1);\nif (user.IsSuccess)\n{\n    var address = GetAddress(user.Value.Id);\n    if (address.IsSuccess)\n    {\n        return address.Value;\n    }\n    return Result&lt;Address&gt;.Failure(address.Error);\n}\nreturn Result&lt;Address&gt;.Failure(user.Error);\n\n// Prefer\nreturn GetUser(1)\n    .Bind(user =&gt; GetAddress(user.Id));\n</code></pre>"},{"location":"features/result-pattern/#3-use-descriptive-error-messages","title":"3. Use Descriptive Error Messages","text":"<pre><code>// Avoid\nreturn Result&lt;User&gt;.Failure(\"Error\");\n\n// Prefer\nreturn Result&lt;User&gt;.Failure(\n    ErrorCode.ValidationError,\n    \"User name must be between 3 and 50 characters\",\n    new Dictionary&lt;string, object&gt;\n    {\n        { \"Field\", \"Name\" },\n        { \"MinLength\", 3 },\n        { \"MaxLength\", 50 }\n    }\n);\n</code></pre>"},{"location":"features/result-pattern/#common-use-cases","title":"Common Use Cases","text":""},{"location":"features/result-pattern/#1-api-responses","title":"1. API Responses","text":"<pre><code>public async Task&lt;IActionResult&gt; GetUser(int id)\n{\n    var result = await _userService.GetUser(id);\n    return result.Match(\n        user =&gt; Ok(user),\n        error =&gt; StatusCode(GetStatusCode(error.Code), error.Message)\n    );\n}\n</code></pre>"},{"location":"features/result-pattern/#2-validation","title":"2. Validation","text":"<pre><code>public Result&lt;User&gt; ValidateUser(User user)\n{\n    var validationResult = ValidationResult.Create();\n\n    if (string.IsNullOrEmpty(user.Name))\n    {\n        validationResult.AddError(\"Name\", \"Name is required\");\n    }\n\n    if (user.Age &lt; 18)\n    {\n        validationResult.AddError(\"Age\", \"User must be at least 18 years old\");\n    }\n\n    return validationResult.IsValid\n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure(validationResult);\n}\n</code></pre>"},{"location":"features/result-pattern/#3-database-operations","title":"3. Database Operations","text":"<pre><code>public async Task&lt;Result&lt;User&gt;&gt; CreateUser(User user)\n{\n    try\n    {\n        var createdUser = await _repository.CreateAsync(user);\n        return Result&lt;User&gt;.Success(createdUser);\n    }\n    catch (Exception ex)\n    {\n        return Result&lt;User&gt;.Failure(\n            ErrorCode.DatabaseError,\n            \"Failed to create user\",\n            new Dictionary&lt;string, object&gt; { { \"Exception\", ex } }\n        );\n    }\n}\n</code></pre>"},{"location":"features/result-pattern/#next-steps","title":"Next Steps","text":"<ul> <li>Error Handling</li> <li>Validation</li> <li>Async Support</li> <li>Examples </li> </ul>"},{"location":"features/validation/","title":"Validation","text":""},{"location":"features/validation/#overview","title":"Overview","text":"<p>TinyResult provides a robust validation system that helps you validate your data in a clean and type-safe way. The validation features allow you to collect validation errors and handle them appropriately.</p>"},{"location":"features/validation/#key-concepts","title":"Key Concepts","text":""},{"location":"features/validation/#1-validationresult","title":"1. ValidationResult","text":"<p>The <code>ValidationResult</code> type represents the result of a validation operation:</p> <pre><code>public class ValidationResult\n{\n    public bool IsValid { get; }\n    public IReadOnlyDictionary&lt;string, string&gt; Errors { get; }\n}\n</code></pre>"},{"location":"features/validation/#2-creating-validation-results","title":"2. Creating Validation Results","text":"<pre><code>// Create an empty validation result\nvar validationResult = ValidationResult.Create();\n\n// Create a validation result with errors\nvar validationResult = ValidationResult.Create()\n    .AddError(\"Name\", \"Name is required\")\n    .AddError(\"Email\", \"Email is invalid\");\n</code></pre>"},{"location":"features/validation/#basic-validation","title":"Basic Validation","text":""},{"location":"features/validation/#1-simple-validation","title":"1. Simple Validation","text":"<pre><code>public Result&lt;User&gt; ValidateUser(User user)\n{\n    var validationResult = ValidationResult.Create();\n\n    if (string.IsNullOrEmpty(user.Name))\n    {\n        validationResult.AddError(\"Name\", \"Name is required\");\n    }\n\n    if (user.Age &lt; 18)\n    {\n        validationResult.AddError(\"Age\", \"User must be at least 18 years old\");\n    }\n\n    return validationResult.IsValid\n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure(validationResult);\n}\n</code></pre>"},{"location":"features/validation/#2-using-validation-rules","title":"2. Using Validation Rules","text":"<pre><code>public class UserValidationRules\n{\n    public static ValidationResult Validate(User user)\n    {\n        var result = ValidationResult.Create();\n\n        // Name validation\n        if (string.IsNullOrEmpty(user.Name))\n        {\n            result.AddError(\"Name\", \"Name is required\");\n        }\n        else if (user.Name.Length &lt; 3)\n        {\n            result.AddError(\"Name\", \"Name must be at least 3 characters\");\n        }\n\n        // Email validation\n        if (string.IsNullOrEmpty(user.Email))\n        {\n            result.AddError(\"Email\", \"Email is required\");\n        }\n        else if (!IsValidEmail(user.Email))\n        {\n            result.AddError(\"Email\", \"Email is invalid\");\n        }\n\n        return result;\n    }\n\n    private static bool IsValidEmail(string email)\n    {\n        try\n        {\n            var addr = new System.Net.Mail.MailAddress(email);\n            return addr.Address == email;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"features/validation/#advanced-validation","title":"Advanced Validation","text":""},{"location":"features/validation/#1-fluent-validation","title":"1. Fluent Validation","text":"<pre><code>public class UserValidator\n{\n    private readonly ValidationResult _result;\n\n    public UserValidator()\n    {\n        _result = ValidationResult.Create();\n    }\n\n    public UserValidator ValidateName(string name)\n    {\n        if (string.IsNullOrEmpty(name))\n        {\n            _result.AddError(\"Name\", \"Name is required\");\n        }\n        else if (name.Length &lt; 3)\n        {\n            _result.AddError(\"Name\", \"Name must be at least 3 characters\");\n        }\n        return this;\n    }\n\n    public UserValidator ValidateEmail(string email)\n    {\n        if (string.IsNullOrEmpty(email))\n        {\n            _result.AddError(\"Email\", \"Email is required\");\n        }\n        else if (!IsValidEmail(email))\n        {\n            _result.AddError(\"Email\", \"Email is invalid\");\n        }\n        return this;\n    }\n\n    public ValidationResult GetResult() =&gt; _result;\n}\n\n// Usage\nvar validator = new UserValidator()\n    .ValidateName(user.Name)\n    .ValidateEmail(user.Email);\n\nvar result = validator.GetResult();\n</code></pre>"},{"location":"features/validation/#2-validation-with-metadata","title":"2. Validation with Metadata","text":"<pre><code>public class ValidationError\n{\n    public string Field { get; }\n    public string Message { get; }\n    public Dictionary&lt;string, object&gt; Metadata { get; }\n\n    public ValidationError(string field, string message, Dictionary&lt;string, object&gt; metadata = null)\n    {\n        Field = field;\n        Message = message;\n        Metadata = metadata ?? new Dictionary&lt;string, object&gt;();\n    }\n}\n\npublic class EnhancedValidationResult\n{\n    private readonly List&lt;ValidationError&gt; _errors = new();\n\n    public bool IsValid =&gt; _errors.Count == 0;\n    public IReadOnlyList&lt;ValidationError&gt; Errors =&gt; _errors.AsReadOnly();\n\n    public void AddError(string field, string message, Dictionary&lt;string, object&gt; metadata = null)\n    {\n        _errors.Add(new ValidationError(field, message, metadata));\n    }\n}\n</code></pre>"},{"location":"features/validation/#3-cross-field-validation","title":"3. Cross-Field Validation","text":"<pre><code>public class OrderValidator\n{\n    public ValidationResult Validate(Order order)\n    {\n        var result = ValidationResult.Create();\n\n        // Basic field validation\n        if (order.Quantity &lt;= 0)\n        {\n            result.AddError(\"Quantity\", \"Quantity must be greater than 0\");\n        }\n\n        if (order.Price &lt;= 0)\n        {\n            result.AddError(\"Price\", \"Price must be greater than 0\");\n        }\n\n        // Cross-field validation\n        if (order.Quantity &gt; 0 &amp;&amp; order.Price &gt; 0)\n        {\n            var total = order.Quantity * order.Price;\n            if (total &gt; order.Customer.CreditLimit)\n            {\n                result.AddError(\"Total\", \n                    \"Order total exceeds customer credit limit\",\n                    new Dictionary&lt;string, object&gt;\n                    {\n                        { \"Total\", total },\n                        { \"CreditLimit\", order.Customer.CreditLimit }\n                    });\n            }\n        }\n\n        return result;\n    }\n}\n</code></pre>"},{"location":"features/validation/#integration-with-result-pattern","title":"Integration with Result Pattern","text":""},{"location":"features/validation/#1-converting-validation-results","title":"1. Converting Validation Results","text":"<pre><code>public static class ValidationResultExtensions\n{\n    public static Result&lt;T&gt; ToResult&lt;T&gt;(this ValidationResult validationResult, T value)\n    {\n        return validationResult.IsValid\n            ? Result&lt;T&gt;.Success(value)\n            : Result&lt;T&gt;.Failure(validationResult);\n    }\n}\n\n// Usage\nvar validationResult = ValidateUser(user);\nvar result = validationResult.ToResult(user);\n</code></pre>"},{"location":"features/validation/#2-combining-results","title":"2. Combining Results","text":"<pre><code>public Result&lt;Order&gt; ValidateAndCreateOrder(OrderRequest request)\n{\n    // Validate customer\n    var customerResult = ValidateCustomer(request.Customer);\n    if (customerResult.IsFailure)\n    {\n        return Result&lt;Order&gt;.Failure(customerResult.Error);\n    }\n\n    // Validate order items\n    var itemsResult = ValidateOrderItems(request.Items);\n    if (itemsResult.IsFailure)\n    {\n        return Result&lt;Order&gt;.Failure(itemsResult.Error);\n    }\n\n    // Create order\n    var order = new Order\n    {\n        Customer = customerResult.Value,\n        Items = itemsResult.Value\n    };\n\n    return Result&lt;Order&gt;.Success(order);\n}\n</code></pre>"},{"location":"features/validation/#best-practices","title":"Best Practices","text":""},{"location":"features/validation/#1-keep-validation-rules-separate","title":"1. Keep Validation Rules Separate","text":"<pre><code>// Avoid\npublic class User\n{\n    public string Name { get; set; }\n    public string Email { get; set; }\n\n    public bool IsValid()\n    {\n        // Validation logic here\n    }\n}\n\n// Prefer\npublic class UserValidator\n{\n    public ValidationResult Validate(User user)\n    {\n        // Validation logic here\n    }\n}\n</code></pre>"},{"location":"features/validation/#2-use-descriptive-error-messages","title":"2. Use Descriptive Error Messages","text":"<pre><code>// Avoid\nresult.AddError(\"Name\", \"Invalid\");\n\n// Prefer\nresult.AddError(\"Name\", \"Name must be between 3 and 50 characters\");\n</code></pre>"},{"location":"features/validation/#3-include-context-in-error-messages","title":"3. Include Context in Error Messages","text":"<pre><code>// Avoid\nresult.AddError(\"Age\", \"Invalid age\");\n\n// Prefer\nresult.AddError(\"Age\", \n    \"Age must be between 18 and 100\",\n    new Dictionary&lt;string, object&gt;\n    {\n        { \"MinAge\", 18 },\n        { \"MaxAge\", 100 },\n        { \"CurrentAge\", age }\n    });\n</code></pre>"},{"location":"features/validation/#common-use-cases","title":"Common Use Cases","text":""},{"location":"features/validation/#1-form-validation","title":"1. Form Validation","text":"<pre><code>public Result&lt;User&gt; ValidateRegistrationForm(RegistrationForm form)\n{\n    var validationResult = ValidationResult.Create();\n\n    // Validate username\n    if (string.IsNullOrEmpty(form.Username))\n    {\n        validationResult.AddError(\"Username\", \"Username is required\");\n    }\n    else if (form.Username.Length &lt; 3)\n    {\n        validationResult.AddError(\"Username\", \"Username must be at least 3 characters\");\n    }\n\n    // Validate password\n    if (string.IsNullOrEmpty(form.Password))\n    {\n        validationResult.AddError(\"Password\", \"Password is required\");\n    }\n    else if (form.Password.Length &lt; 8)\n    {\n        validationResult.AddError(\"Password\", \"Password must be at least 8 characters\");\n    }\n\n    return validationResult.ToResult(new User\n    {\n        Username = form.Username,\n        Password = form.Password\n    });\n}\n</code></pre>"},{"location":"features/validation/#2-business-rule-validation","title":"2. Business Rule Validation","text":"<pre><code>public Result&lt;Order&gt; ValidateOrder(Order order)\n{\n    var validationResult = ValidationResult.Create();\n\n    // Validate order status\n    if (order.Status == OrderStatus.Cancelled &amp;&amp; order.Items.Any())\n    {\n        validationResult.AddError(\"Status\", \"Cannot cancel order with items\");\n    }\n\n    // Validate payment\n    if (order.PaymentStatus == PaymentStatus.Paid &amp;&amp; order.TotalAmount == 0)\n    {\n        validationResult.AddError(\"Payment\", \"Cannot mark empty order as paid\");\n    }\n\n    return validationResult.ToResult(order);\n}\n</code></pre>"},{"location":"features/validation/#3-data-integrity-validation","title":"3. Data Integrity Validation","text":"<pre><code>public Result&lt;DatabaseRecord&gt; ValidateRecord(DatabaseRecord record)\n{\n    var validationResult = ValidationResult.Create();\n\n    // Validate required fields\n    if (record.Id == Guid.Empty)\n    {\n        validationResult.AddError(\"Id\", \"Id is required\");\n    }\n\n    if (record.CreatedAt &gt; DateTime.UtcNow)\n    {\n        validationResult.AddError(\"CreatedAt\", \"Creation date cannot be in the future\");\n    }\n\n    // Validate relationships\n    if (record.ParentId.HasValue &amp;&amp; !_repository.Exists(record.ParentId.Value))\n    {\n        validationResult.AddError(\"ParentId\", \"Parent record does not exist\");\n    }\n\n    return validationResult.ToResult(record);\n}\n</code></pre>"},{"location":"features/validation/#next-steps","title":"Next Steps","text":"<ul> <li>Async Support</li> <li>LINQ Support</li> <li>Examples </li> </ul>"},{"location":"getting-started/basic-usage/","title":"Basic Usage","text":""},{"location":"getting-started/basic-usage/#creating-results","title":"Creating Results","text":""},{"location":"getting-started/basic-usage/#success-results","title":"Success Results","text":"<p>Create a successful result using the <code>Success</code> factory method:</p> <pre><code>// Create a successful result with a value\nvar successResult = Result&lt;int&gt;.Success(42);\n\n// Create a successful result with a string\nvar stringResult = Result&lt;string&gt;.Success(\"Hello, World!\");\n\n// Create a successful result with an object\nvar userResult = Result&lt;User&gt;.Success(new User { Id = 1, Name = \"John\" });\n</code></pre>"},{"location":"getting-started/basic-usage/#failure-results","title":"Failure Results","text":"<p>Create a failed result using the <code>Failure</code> factory method:</p> <pre><code>// Create a failed result with an error message\nvar errorResult = Result&lt;int&gt;.Failure(\"Something went wrong\");\n\n// Create a failed result with an error code and message\nvar errorResult = Result&lt;int&gt;.Failure(ErrorCode.NotFound, \"User not found\");\n\n// Create a failed result with a custom error\nvar errorResult = Result&lt;int&gt;.Failure(new Error(ErrorCode.ValidationError, \"Invalid input\"));\n</code></pre>"},{"location":"getting-started/basic-usage/#working-with-results","title":"Working with Results","text":""},{"location":"getting-started/basic-usage/#checking-result-state","title":"Checking Result State","text":"<pre><code>var result = GetUser(1);\n\n// Check if the result is successful\nif (result.IsSuccess)\n{\n    Console.WriteLine($\"User found: {result.Value.Name}\");\n}\n\n// Check if the result has failed\nif (result.IsFailure)\n{\n    Console.WriteLine($\"Error: {result.Error.Message}\");\n}\n</code></pre>"},{"location":"getting-started/basic-usage/#accessing-values","title":"Accessing Values","text":"<pre><code>var result = GetUser(1);\n\n// Get the value if successful, or throw an exception if failed\nvar user = result.Value;\n\n// Get the value if successful, or a default value if failed\nvar user = result.GetValueOrDefault();\n\n// Get the value if successful, or null if failed\nvar user = result.GetValueOrNull();\n\n// Get the value if successful, or execute a function if failed\nvar user = result.GetValueOr(() =&gt; new User { Name = \"Default\" });\n</code></pre>"},{"location":"getting-started/basic-usage/#handling-results","title":"Handling Results","text":"<pre><code>var result = GetUser(1);\n\n// Match on success or failure\nresult.Match(\n    user =&gt; Console.WriteLine($\"User found: {user.Name}\"),\n    error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n);\n\n// Execute an action on success\nresult.OnSuccess(user =&gt; Console.WriteLine($\"User found: {user.Name}\"));\n\n// Execute an action on failure\nresult.OnFailure(error =&gt; Console.WriteLine($\"Error: {error.Message}\"));\n</code></pre>"},{"location":"getting-started/basic-usage/#transforming-results","title":"Transforming Results","text":""},{"location":"getting-started/basic-usage/#map","title":"Map","text":"<p>Transform a successful result using the <code>Map</code> method:</p> <pre><code>var result = GetUser(1)\n    .Map(user =&gt; user.Name)\n    .Map(name =&gt; name.ToUpper());\n\nresult.Match(\n    name =&gt; Console.WriteLine($\"User name: {name}\"),\n    error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n);\n</code></pre>"},{"location":"getting-started/basic-usage/#bind","title":"Bind","text":"<p>Chain operations that return results using the <code>Bind</code> method:</p> <pre><code>var result = GetUser(1)\n    .Bind(user =&gt; GetUserAddress(user.Id))\n    .Bind(address =&gt; GetAddressCoordinates(address));\n\nresult.Match(\n    coordinates =&gt; Console.WriteLine($\"Coordinates: {coordinates}\"),\n    error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n);\n</code></pre>"},{"location":"getting-started/basic-usage/#filter","title":"Filter","text":"<p>Filter a successful result using the <code>Filter</code> method:</p> <pre><code>var result = GetUser(1)\n    .Filter(user =&gt; user.Age &gt;= 18, \"User must be at least 18 years old\");\n\nresult.Match(\n    user =&gt; Console.WriteLine($\"User found: {user.Name}\"),\n    error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n);\n</code></pre>"},{"location":"getting-started/basic-usage/#working-with-collections","title":"Working with Collections","text":""},{"location":"getting-started/basic-usage/#combining-results","title":"Combining Results","text":"<p>Combine multiple results into a single result:</p> <pre><code>var results = new[]\n{\n    GetUser(1),\n    GetUser(2),\n    GetUser(3)\n};\n\nvar combinedResult = Result.Combine(results);\n\ncombinedResult.Match(\n    users =&gt; Console.WriteLine($\"Found {users.Count()} users\"),\n    error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n);\n</code></pre>"},{"location":"getting-started/basic-usage/#linq-operations","title":"LINQ Operations","text":"<p>Use LINQ operations with results:</p> <pre><code>var results = new[]\n{\n    GetUser(1),\n    GetUser(2),\n    GetUser(3)\n};\n\nvar validUsers = results\n    .Where(r =&gt; r.IsSuccess)\n    .Select(r =&gt; r.Value)\n    .ToList();\n\nConsole.WriteLine($\"Found {validUsers.Count} valid users\");\n</code></pre>"},{"location":"getting-started/basic-usage/#error-handling","title":"Error Handling","text":""},{"location":"getting-started/basic-usage/#creating-errors","title":"Creating Errors","text":"<pre><code>// Create a simple error\nvar error = Error.Create(\"Something went wrong\");\n\n// Create an error with a code\nvar error = Error.Create(ErrorCode.NotFound, \"User not found\");\n\n// Create an error with metadata\nvar error = Error.Create(\n    ErrorCode.ValidationError,\n    \"Invalid input\",\n    new Dictionary&lt;string, object&gt;\n    {\n        { \"Field\", \"Name\" },\n        { \"Value\", \"\" }\n    }\n);\n</code></pre>"},{"location":"getting-started/basic-usage/#handling-errors","title":"Handling Errors","text":"<pre><code>var result = GetUser(1);\n\n// Handle specific error codes\nif (result.IsFailure)\n{\n    switch (result.Error.Code)\n    {\n        case ErrorCode.NotFound:\n            Console.WriteLine(\"User not found\");\n            break;\n        case ErrorCode.ValidationError:\n            Console.WriteLine(\"Validation failed\");\n            break;\n        default:\n            Console.WriteLine(\"Unknown error\");\n            break;\n    }\n}\n</code></pre>"},{"location":"getting-started/basic-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Features</li> <li>Examples</li> <li>API Reference </li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET 6.0, 7.0, 8.0, or 9.0</li> <li>Visual Studio 2022 or later (recommended)</li> <li>Visual Studio Code with C# extension (alternative)</li> </ul>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>TinyResult requires the following dependencies: - System.Text.Json (7.0.3)</p>"},{"location":"getting-started/installation/#package-installation","title":"Package Installation","text":""},{"location":"getting-started/installation/#nuget-package-manager","title":"NuGet Package Manager","text":"<ol> <li>Open your project in Visual Studio</li> <li>Right-click on the project in Solution Explorer</li> <li>Select \"Manage NuGet Packages\"</li> <li>Search for \"TinyResult\"</li> <li>Click \"Install\"</li> </ol>"},{"location":"getting-started/installation/#net-cli","title":".NET CLI","text":"<pre><code>dotnet add package TinyResult\n</code></pre>"},{"location":"getting-started/installation/#packagereference","title":"PackageReference","text":"<p>Add the following to your project file:</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"TinyResult\" Version=\"1.0.0\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre>"},{"location":"getting-started/installation/#project-setup","title":"Project Setup","text":""},{"location":"getting-started/installation/#1-create-a-new-project","title":"1. Create a New Project","text":"<pre><code>dotnet new console -n MyApp\ncd MyApp\n</code></pre>"},{"location":"getting-started/installation/#2-add-tinyresult-package","title":"2. Add TinyResult Package","text":"<pre><code>dotnet add package TinyResult\n</code></pre>"},{"location":"getting-started/installation/#3-add-using-directive","title":"3. Add Using Directive","text":"<p>Add the following using directive to your code:</p> <pre><code>using TinyResult;\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#basic-configuration","title":"Basic Configuration","text":"<p>No special configuration is required to start using TinyResult. The library is ready to use after installation.</p>"},{"location":"getting-started/installation/#optional-configuration","title":"Optional Configuration","text":"<p>If you want to customize the behavior of TinyResult, you can do so by creating a configuration class:</p> <pre><code>public class TinyResultConfig\n{\n    public static void Configure()\n    {\n        // Configure default error messages\n        Result.DefaultErrorMessages = new Dictionary&lt;ErrorCode, string&gt;\n        {\n            { ErrorCode.Unknown, \"An unknown error occurred\" },\n            { ErrorCode.NotFound, \"The requested resource was not found\" },\n            { ErrorCode.ValidationError, \"Validation failed\" }\n        };\n\n        // Configure logging\n        Result.OnError = error =&gt; Console.WriteLine($\"Error: {error.Message}\");\n    }\n}\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>To verify that TinyResult is installed correctly, create a simple test:</p> <pre><code>using TinyResult;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var result = Result&lt;int&gt;.Success(42);\n        result.Match(\n            value =&gt; Console.WriteLine($\"Success: {value}\"),\n            error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n        );\n    }\n}\n</code></pre> <p>Run the program and you should see the output:</p> <pre><code>Success: 42\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li>Package Not Found</li> <li>Ensure you have the correct NuGet source configured</li> <li>Check your internet connection</li> <li> <p>Verify the package name is correct</p> </li> <li> <p>Version Conflicts</p> </li> <li>Check for version conflicts with other packages</li> <li>Update to the latest version of TinyResult</li> <li> <p>Consider using a specific version</p> </li> <li> <p>Build Errors</p> </li> <li>Clean and rebuild your solution</li> <li>Check for missing references</li> <li>Verify your .NET version</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues:</p> <ol> <li>Check the documentation</li> <li>Search for existing issues on GitHub</li> <li>Create a new issue if needed</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Basic Usage</li> <li>Features</li> <li>Examples </li> </ul>"},{"location":"getting-started/introduction/","title":"Introduction","text":""},{"location":"getting-started/introduction/#what-is-tinyresult","title":"What is TinyResult?","text":"<p>TinyResult is a lightweight and powerful implementation of the Result Pattern for .NET. It provides a clean and type-safe way to handle success and failure cases in your applications.</p>"},{"location":"getting-started/introduction/#why-use-tinyresult","title":"Why Use TinyResult?","text":""},{"location":"getting-started/introduction/#1-clean-error-handling","title":"1. Clean Error Handling","text":"<p>TinyResult helps you handle errors in a clean and type-safe way. Instead of throwing exceptions or returning null, you can use the Result type to represent both success and failure cases.</p> <pre><code>// Without TinyResult\npublic User GetUser(int id)\n{\n    var user = _userRepository.GetById(id);\n    if (user == null)\n    {\n        throw new UserNotFoundException($\"User with id {id} not found\");\n    }\n    return user;\n}\n\n// With TinyResult\npublic Result&lt;User&gt; GetUser(int id)\n{\n    var user = _userRepository.GetById(id);\n    return user != null \n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure($\"User with id {id} not found\");\n}\n</code></pre>"},{"location":"getting-started/introduction/#2-type-safety","title":"2. Type Safety","text":"<p>TinyResult ensures that you handle both success and failure cases explicitly. The compiler will help you catch potential errors at compile time.</p> <pre><code>// The compiler will force you to handle both cases\nvar result = GetUser(1);\nresult.Match(\n    user =&gt; Console.WriteLine($\"User found: {user.Name}\"),\n    error =&gt; Console.WriteLine($\"Error: {error.Message}\")\n);\n</code></pre>"},{"location":"getting-started/introduction/#3-functional-programming-features","title":"3. Functional Programming Features","text":"<p>TinyResult provides functional programming features like map, bind, and match operations that make your code more expressive and easier to reason about.</p> <pre><code>// Chain operations together\nvar result = GetUser(1)\n    .Map(user =&gt; user.Name)\n    .Map(name =&gt; name.ToUpper())\n    .OnSuccess(name =&gt; Console.WriteLine($\"User name: {name}\"))\n    .OnFailure(error =&gt; Console.WriteLine($\"Error: {error.Message}\"));\n</code></pre>"},{"location":"getting-started/introduction/#4-validation-support","title":"4. Validation Support","text":"<p>TinyResult includes built-in validation support that makes it easy to validate your data and collect validation errors.</p> <pre><code>// Validate user data\nvar validationResult = ValidationResult.Create()\n    .AddError(\"Name\", \"Name is required\")\n    .AddError(\"Email\", \"Email is invalid\");\n\nif (!validationResult.IsValid)\n{\n    return Result&lt;User&gt;.Failure(validationResult);\n}\n</code></pre>"},{"location":"getting-started/introduction/#5-async-support","title":"5. Async Support","text":"<p>TinyResult provides full async/await support for all operations, making it easy to work with asynchronous code.</p> <pre><code>// Async operations\npublic async Task&lt;Result&lt;User&gt;&gt; GetUserAsync(int id)\n{\n    var user = await _userRepository.GetByIdAsync(id);\n    return user != null \n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure($\"User with id {id} not found\");\n}\n</code></pre>"},{"location":"getting-started/introduction/#6-linq-support","title":"6. LINQ Support","text":"<p>TinyResult supports LINQ-style operations that make it easy to work with collections of results.</p> <pre><code>// LINQ operations\nvar results = new[] { GetUser(1), GetUser(2), GetUser(3) };\nvar validUsers = results.Where(r =&gt; r.IsSuccess).Select(r =&gt; r.Value);\n</code></pre>"},{"location":"getting-started/introduction/#getting-started","title":"Getting Started","text":"<p>To get started with TinyResult, follow these steps:</p> <ol> <li>Install TinyResult</li> <li>Learn the basics</li> <li>Explore the features</li> <li>Check out the examples</li> </ol>"},{"location":"getting-started/introduction/#next-steps","title":"Next Steps","text":"<ul> <li>Installation</li> <li>Basic Usage</li> <li>Features</li> <li>Examples </li> </ul>"},{"location":"guides/migration/","title":"Migration Guide","text":""},{"location":"guides/migration/#overview","title":"Overview","text":"<p>This guide helps you migrate your existing code to use TinyResult effectively. It covers common scenarios and provides step-by-step instructions for migration.</p>"},{"location":"guides/migration/#from-traditional-error-handling","title":"From Traditional Error Handling","text":""},{"location":"guides/migration/#1-try-catch-blocks","title":"1. Try-Catch Blocks","text":"<pre><code>// Before: Traditional try-catch\npublic User GetUser(int id)\n{\n    try\n    {\n        var user = _repository.GetUser(id);\n        if (user == null)\n            throw new UserNotFoundException($\"User {id} not found\");\n        return user;\n    }\n    catch (Exception ex)\n    {\n        _logger.Error(ex, \"Error getting user\");\n        throw;\n    }\n}\n\n// After: Using Result\npublic Result&lt;User&gt; GetUser(int id)\n{\n    return ResultPipeline&lt;User&gt;\n        .Start(id)\n        .Then(id =&gt; _repository.GetUser(id))\n        .Validate(user =&gt; user != null, ErrorCode.NotFound, $\"User {id} not found\")\n        .Catch(error =&gt; \n        {\n            _logger.Error(error.Message);\n            return Result&lt;User&gt;.Failure(error);\n        })\n        .Build();\n}\n</code></pre>"},{"location":"guides/migration/#2-null-checks","title":"2. Null Checks","text":"<pre><code>// Before: Null checks with exceptions\npublic string ProcessData(string data)\n{\n    if (data == null)\n        throw new ArgumentNullException(nameof(data));\n\n    return data.ToUpper();\n}\n\n// After: Using Result\npublic Result&lt;string&gt; ProcessData(string data)\n{\n    return ResultPipeline&lt;string&gt;\n        .Start(data)\n        .Validate(d =&gt; d != null, ErrorCode.ValidationError, \"Data cannot be null\")\n        .Map(d =&gt; d.ToUpper())\n        .Build();\n}\n</code></pre>"},{"location":"guides/migration/#from-other-result-libraries","title":"From Other Result Libraries","text":""},{"location":"guides/migration/#1-fluentresults","title":"1. FluentResults","text":"<pre><code>// Before: FluentResults\npublic Result&lt;User&gt; GetUser(int id)\n{\n    return Result.Ok(id)\n        .Bind(id =&gt; _repository.GetUser(id))\n        .Ensure(user =&gt; user != null, \"User not found\")\n        .OnSuccess(user =&gt; _logger.Info($\"User found: {user.Id}\"))\n        .OnFailure(error =&gt; _logger.Error(error.Message));\n}\n\n// After: TinyResult\npublic Result&lt;User&gt; GetUser(int id)\n{\n    return ResultPipeline&lt;User&gt;\n        .Start(id)\n        .Then(id =&gt; _repository.GetUser(id))\n        .Validate(user =&gt; user != null, ErrorCode.NotFound, \"User not found\")\n        .OnSuccess(user =&gt; _logger.Info($\"User found: {user.Id}\"))\n        .OnFailure(error =&gt; _logger.Error(error.Message))\n        .Build();\n}\n</code></pre>"},{"location":"guides/migration/#2-languageext","title":"2. LanguageExt","text":"<pre><code>// Before: LanguageExt\npublic Either&lt;Error, User&gt; GetUser(int id)\n{\n    return from user in _repository.GetUser(id)\n           from validated in ValidateUser(user)\n           select validated;\n}\n\n// After: TinyResult\npublic Result&lt;User&gt; GetUser(int id)\n{\n    return ResultPipeline&lt;User&gt;\n        .Start(id)\n        .Then(id =&gt; _repository.GetUser(id))\n        .Then(user =&gt; ValidateUser(user))\n        .Build();\n}\n</code></pre>"},{"location":"guides/migration/#from-custom-result-types","title":"From Custom Result Types","text":""},{"location":"guides/migration/#1-simple-result","title":"1. Simple Result","text":"<pre><code>// Before: Custom Result\npublic class OperationResult&lt;T&gt;\n{\n    public bool Success { get; }\n    public T Value { get; }\n    public string ErrorMessage { get; }\n}\n\npublic OperationResult&lt;User&gt; GetUser(int id)\n{\n    var user = _repository.GetUser(id);\n    if (user == null)\n        return OperationResult&lt;User&gt;.Failure(\"User not found\");\n    return OperationResult&lt;User&gt;.Success(user);\n}\n\n// After: TinyResult\npublic Result&lt;User&gt; GetUser(int id)\n{\n    return ResultPipeline&lt;User&gt;\n        .Start(id)\n        .Then(id =&gt; _repository.GetUser(id))\n        .Validate(user =&gt; user != null, ErrorCode.NotFound, \"User not found\")\n        .Build();\n}\n</code></pre>"},{"location":"guides/migration/#2-result-with-metadata","title":"2. Result with Metadata","text":"<pre><code>// Before: Custom Result with Metadata\npublic class OperationResult&lt;T&gt;\n{\n    public bool Success { get; }\n    public T Value { get; }\n    public string ErrorMessage { get; }\n    public Dictionary&lt;string, object&gt; Metadata { get; }\n}\n\n// After: TinyResult\npublic Result&lt;User&gt; GetUser(int id)\n{\n    return ResultPipeline&lt;User&gt;\n        .Start(id)\n        .Then(id =&gt; _repository.GetUser(id))\n        .Validate(user =&gt; user != null, ErrorCode.NotFound, \"User not found\")\n        .OnSuccess(user =&gt; \n        {\n            user.Metadata[\"RetrievedAt\"] = DateTime.UtcNow;\n            return user;\n        })\n        .Build();\n}\n</code></pre>"},{"location":"guides/migration/#common-migration-patterns","title":"Common Migration Patterns","text":""},{"location":"guides/migration/#1-converting-exceptions","title":"1. Converting Exceptions","text":"<pre><code>// Before: Exception-based\npublic User GetUser(int id)\n{\n    try\n    {\n        return _repository.GetUser(id);\n    }\n    catch (SqlException ex)\n    {\n        throw new DatabaseException(\"Database error\", ex);\n    }\n}\n\n// After: Result-based\npublic Result&lt;User&gt; GetUser(int id)\n{\n    return Result.FromTry(\n        () =&gt; _repository.GetUser(id),\n        ex =&gt; ex is SqlException\n            ? Error.Create(ErrorCode.DatabaseError, \"Database error\", ex)\n            : Error.Create(ErrorCode.InternalError, \"Unexpected error\", ex)\n    );\n}\n</code></pre>"},{"location":"guides/migration/#2-handling-multiple-results","title":"2. Handling Multiple Results","text":"<pre><code>// Before: Multiple checks\npublic (User User, Order Order) GetUserAndOrder(int userId, int orderId)\n{\n    var user = _userRepository.GetUser(userId);\n    if (user == null)\n        throw new UserNotFoundException($\"User {userId} not found\");\n\n    var order = _orderRepository.GetOrder(orderId);\n    if (order == null)\n        throw new OrderNotFoundException($\"Order {orderId} not found\");\n\n    return (user, order);\n}\n\n// After: Using Result.Combine\npublic Result&lt;(User User, Order Order)&gt; GetUserAndOrder(int userId, int orderId)\n{\n    var userResult = ResultPipeline&lt;User&gt;\n        .Start(userId)\n        .Then(id =&gt; _userRepository.GetUser(id))\n        .Validate(user =&gt; user != null, ErrorCode.NotFound, $\"User {userId} not found\")\n        .Build();\n\n    var orderResult = ResultPipeline&lt;Order&gt;\n        .Start(orderId)\n        .Then(id =&gt; _orderRepository.GetOrder(id))\n        .Validate(order =&gt; order != null, ErrorCode.NotFound, $\"Order {orderId} not found\")\n        .Build();\n\n    return Result.Combine(userResult, orderResult);\n}\n</code></pre>"},{"location":"guides/migration/#migration-checklist","title":"Migration Checklist","text":"<ol> <li>Identify Error Handling Patterns</li> <li>Find try-catch blocks</li> <li>Locate null checks</li> <li> <p>Identify custom result types</p> </li> <li> <p>Replace Exception Throwing</p> </li> <li>Convert throw statements to Result.Failure</li> <li>Use appropriate error codes</li> <li> <p>Add error metadata</p> </li> <li> <p>Update Method Signatures</p> </li> <li>Change return types to Result <li>Update async methods to return Task&gt; <li> <p>Modify method documentation</p> </li> <li> <p>Refactor Validation</p> </li> <li>Replace if statements with Validate</li> <li>Use batch validation where appropriate</li> <li> <p>Implement custom validation rules</p> </li> <li> <p>Update Error Handling</p> </li> <li>Replace catch blocks with Catch</li> <li>Use appropriate error recovery strategies</li> <li> <p>Add error logging</p> </li> <li> <p>Test Migration</p> </li> <li>Verify success cases</li> <li>Test error scenarios</li> <li> <p>Check performance impact</p> </li> <li> <p>Document Changes</p> </li> <li>Update API documentation</li> <li>Add migration notes</li> <li>Document breaking changes</li>"},{"location":"guides/migration/#breaking-changes","title":"Breaking Changes","text":"<ol> <li>Method Signatures</li> <li>Return types changed to Result <li> <p>Async methods return Task&gt; <li> <p>Error Handling</p> </li> <li>Exceptions replaced with Result.Failure</li> <li> <p>Custom error types replaced with Error</p> </li> <li> <p>Validation</p> </li> <li>Validation logic moved to Validate method</li> <li> <p>Custom validation rules need adaptation</p> </li> <li> <p>Async Operations</p> </li> <li>ConfigureAwait usage required</li> <li>Parallel processing patterns changed</li>"},{"location":"guides/migration/#tips-for-smooth-migration","title":"Tips for Smooth Migration","text":"<ol> <li>Start Small</li> <li>Begin with simple methods</li> <li>Migrate one component at a time</li> <li> <p>Test thoroughly after each change</p> </li> <li> <p>Use Automation</p> </li> <li>Create migration scripts</li> <li>Use code analysis tools</li> <li> <p>Automate testing</p> </li> <li> <p>Maintain Compatibility</p> </li> <li>Keep old methods temporarily</li> <li>Use adapter patterns</li> <li> <p>Phase out old code gradually</p> </li> <li> <p>Document Progress</p> </li> <li>Track migrated components</li> <li>Note issues encountered</li> <li> <p>Share lessons learned</p> </li> <li> <p>Get Feedback</p> </li> <li>Involve team members</li> <li>Gather user feedback</li> <li>Adjust approach as needed </li> </ol>"},{"location":"guides/performance/","title":"Performance Guide","text":""},{"location":"guides/performance/#overview","title":"Overview","text":"<p>This guide provides best practices and recommendations for optimizing performance when using TinyResult in your applications.</p>"},{"location":"guides/performance/#memory-usage","title":"Memory Usage","text":""},{"location":"guides/performance/#1-value-types-vs-reference-types","title":"1. Value Types vs Reference Types","text":"<pre><code>// Prefer value types for small data\npublic Result&lt;int&gt; GetUserId() { ... }\n\n// Use reference types for larger data\npublic Result&lt;User&gt; GetUser() { ... }\n</code></pre>"},{"location":"guides/performance/#2-avoid-unnecessary-allocations","title":"2. Avoid Unnecessary Allocations","text":"<pre><code>// Avoid: Creates new Error instance for each call\npublic Result&lt;T&gt; Validate(T value)\n{\n    return value != null \n        ? Result&lt;T&gt;.Success(value)\n        : Result&lt;T&gt;.Failure(new Error(ErrorCode.ValidationError, \"Value cannot be null\"));\n}\n\n// Prefer: Reuse Error instances\nprivate static readonly Error NullValueError = Error.Create(ErrorCode.ValidationError, \"Value cannot be null\");\n\npublic Result&lt;T&gt; Validate(T value)\n{\n    return value != null \n        ? Result&lt;T&gt;.Success(value)\n        : Result&lt;T&gt;.Failure(NullValueError);\n}\n</code></pre>"},{"location":"guides/performance/#async-operations","title":"Async Operations","text":""},{"location":"guides/performance/#1-configureawait","title":"1. ConfigureAwait","text":"<pre><code>public async Task&lt;Result&lt;T&gt;&gt; GetDataAsync()\n{\n    return await ResultPipeline&lt;T&gt;\n        .Start(initialValue)\n        .ThenAsync(async value =&gt; await ProcessAsync(value).ConfigureAwait(false))\n        .BuildAsync();\n}\n</code></pre>"},{"location":"guides/performance/#2-parallel-operations","title":"2. Parallel Operations","text":"<pre><code>public async Task&lt;Result&lt;List&lt;T&gt;&gt;&gt; ProcessInParallelAsync(List&lt;int&gt; ids)\n{\n    var tasks = ids.Select(id =&gt; ProcessAsync(id));\n    var results = await Task.WhenAll(tasks);\n\n    return Result.Combine(results);\n}\n</code></pre>"},{"location":"guides/performance/#pipeline-optimization","title":"Pipeline Optimization","text":""},{"location":"guides/performance/#1-chain-length","title":"1. Chain Length","text":"<pre><code>// Avoid: Too many chained operations\nvar result = pipeline\n    .Map(x =&gt; x + 1)\n    .Map(x =&gt; x * 2)\n    .Map(x =&gt; x.ToString())\n    .Map(x =&gt; x.ToUpper())\n    .Map(x =&gt; x.Length);\n\n// Prefer: Combine operations\nvar result = pipeline\n    .Map(x =&gt; (x + 1) * 2)\n    .Map(x =&gt; x.ToString().ToUpper().Length);\n</code></pre>"},{"location":"guides/performance/#2-early-validation","title":"2. Early Validation","text":"<pre><code>// Avoid: Validating after expensive operations\nvar result = await pipeline\n    .ThenAsync(async x =&gt; await ExpensiveOperationAsync(x))\n    .Validate(x =&gt; x.IsValid, \"Invalid result\");\n\n// Prefer: Validate early\nvar result = await pipeline\n    .Validate(x =&gt; x.IsValid, \"Invalid input\")\n    .ThenAsync(async x =&gt; await ExpensiveOperationAsync(x));\n</code></pre>"},{"location":"guides/performance/#error-handling","title":"Error Handling","text":""},{"location":"guides/performance/#1-error-creation","title":"1. Error Creation","text":"<pre><code>// Avoid: Creating detailed errors for every failure\npublic Result&lt;T&gt; Process(T value)\n{\n    try\n    {\n        // Operation\n    }\n    catch (Exception ex)\n    {\n        return Result&lt;T&gt;.Failure(new Error(\n            ErrorCode.InternalError,\n            ex.Message,\n            new Dictionary&lt;string, object&gt;\n            {\n                { \"StackTrace\", ex.StackTrace },\n                { \"Source\", ex.Source },\n                { \"Timestamp\", DateTime.UtcNow }\n            }\n        ));\n    }\n}\n\n// Prefer: Create detailed errors only when needed\npublic Result&lt;T&gt; Process(T value)\n{\n    try\n    {\n        // Operation\n    }\n    catch (Exception ex)\n    {\n        return Result&lt;T&gt;.Failure(ErrorCode.InternalError, \"Operation failed\");\n    }\n}\n</code></pre>"},{"location":"guides/performance/#2-error-recovery","title":"2. Error Recovery","text":"<pre><code>// Avoid: Multiple recovery attempts\nvar result = await pipeline\n    .Catch(error =&gt; Recovery1(error))\n    .Catch(error =&gt; Recovery2(error))\n    .Catch(error =&gt; Recovery3(error));\n\n// Prefer: Single recovery with fallback\nvar result = await pipeline\n    .Catch(error =&gt; \n        error.Code == ErrorCode.Timeout \n            ? Recovery1(error)\n            : Recovery2(error)\n    );\n</code></pre>"},{"location":"guides/performance/#validation","title":"Validation","text":""},{"location":"guides/performance/#1-batch-validation","title":"1. Batch Validation","text":"<pre><code>// Avoid: Multiple validation calls\nvar result = value\n    .Validate(x =&gt; x != null, \"Value cannot be null\")\n    .Validate(x =&gt; x.Length &gt; 0, \"Value cannot be empty\")\n    .Validate(x =&gt; x.Length &lt; 100, \"Value too long\");\n\n// Prefer: Single validation with multiple rules\nvar result = value.Validate(x =&gt; new[]\n{\n    (x != null, \"Value cannot be null\"),\n    (x.Length &gt; 0, \"Value cannot be empty\"),\n    (x.Length &lt; 100, \"Value too long\")\n});\n</code></pre>"},{"location":"guides/performance/#2-lazy-validation","title":"2. Lazy Validation","text":"<pre><code>// Avoid: Validating all fields immediately\npublic Result&lt;User&gt; ValidateUser(User user)\n{\n    var validationResult = ValidationResult.Create()\n        .AddErrorIf(user.Name == null, \"Name\", \"Name is required\")\n        .AddErrorIf(user.Email == null, \"Email\", \"Email is required\")\n        .AddErrorIf(user.Password == null, \"Password\", \"Password is required\");\n\n    return validationResult.IsValid\n        ? Result&lt;User&gt;.Success(user)\n        : Result&lt;User&gt;.Failure(validationResult.Errors);\n}\n\n// Prefer: Validate fields only when needed\npublic Result&lt;User&gt; ValidateUser(User user)\n{\n    return ResultPipeline&lt;User&gt;\n        .Start(user)\n        .Then(u =&gt; ValidateName(u))\n        .Then(u =&gt; ValidateEmail(u))\n        .Then(u =&gt; ValidatePassword(u))\n        .Build();\n}\n</code></pre>"},{"location":"guides/performance/#best-practices","title":"Best Practices","text":"<ol> <li>Use Value Types for Small Data</li> <li>Reduces memory allocations</li> <li> <p>Improves cache locality</p> </li> <li> <p>Reuse Error Instances</p> </li> <li>Cache common error messages</li> <li> <p>Use static readonly fields</p> </li> <li> <p>Optimize Async Operations</p> </li> <li>Use ConfigureAwait(false)</li> <li> <p>Process in parallel when possible</p> </li> <li> <p>Minimize Pipeline Length</p> </li> <li>Combine operations</li> <li> <p>Validate early</p> </li> <li> <p>Optimize Error Handling</p> </li> <li>Create detailed errors only when needed</li> <li> <p>Use efficient recovery strategies</p> </li> <li> <p>Efficient Validation</p> </li> <li>Use batch validation</li> <li> <p>Implement lazy validation</p> </li> <li> <p>Memory Management</p> </li> <li>Avoid unnecessary allocations</li> <li> <p>Use object pooling for frequently created objects</p> </li> <li> <p>Exception Handling</p> </li> <li>Catch specific exceptions</li> <li> <p>Avoid catching general Exception</p> </li> <li> <p>Logging</p> </li> <li>Log errors at appropriate levels</li> <li> <p>Include relevant context</p> </li> <li> <p>Testing</p> <ul> <li>Write performance tests</li> <li>Monitor memory usage</li> <li>Profile critical paths </li> </ul> </li> </ol>"}]}